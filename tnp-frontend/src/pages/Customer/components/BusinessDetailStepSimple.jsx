import React, { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  Box,
  Typography,
  TextField,
  Card,
  CardContent,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Button,
  CircularProgress,
  Container,
  Grid2 as Grid,
  useMediaQuery,
  useTheme,
  Chip,
  Stack,
  Alert,
  Tooltip,
  IconButton,
} from "@mui/material";
import { MdAssignment, MdLocationOn, MdGpsFixed, MdExpandMore, MdPhone, MdEmail, MdHome } from "react-icons/md";
import { setInputList } from "../../../features/Customer/customerSlice";

// ‡∏™‡∏µ theme ‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
const PRIMARY_RED = "#9e0000";
const SECONDARY_RED = "#d32f2f";
const BACKGROUND_COLOR = "#fffaf9";

/**
 * Enhanced BusinessDetailStepSimple with improved GPS functionality
 * ‚úÖ High accuracy GPS with enableHighAccuracy
 * ‚úÖ Permission checking with better UX
 * ‚úÖ Reverse geocoding with error handling
 * ‚úÖ Fallback mechanism for IP/Wi-Fi location
 * ‚úÖ Position validation for Thailand coordinates
 * ‚úÖ Enhanced logging and UX
 */
const BusinessDetailStepSimple = ({
  inputList = {},
  errors = {},
  handleInputChange,
  mode = "create",
}) => {
  const dispatch = useDispatch();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("md"));

  // GPS States
  const [isGettingLocation, setIsGettingLocation] = useState(false);
  const [locationStatus, setLocationStatus] = useState("");
  const [gpsResult, setGpsResult] = useState(null);
  const [hasFilledFromGps, setHasFilledFromGps] = useState(false);

  // ‚úÖ 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á GPS ‡∏û‡∏£‡πâ‡∏≠‡∏° Permission checking
  const checkGPSAvailability = async () => {
    if (!navigator.geolocation) {
      return { 
        available: false, 
        message: "‚ùå ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö GPS" 
      };
    }

    try {
      const permission = await navigator.permissions.query({ name: 'geolocation' });
      console.log("üîê GPS Permission Status:", permission.state);
      
      switch (permission.state) {
        case "denied":
          return { 
            available: false, 
            permission: "denied",
            message: "üö´ GPS ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå",
            action: "‡∏Å‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô üîí ‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á'"
          };
        case "prompt":
          return { 
            available: true, 
            permission: "prompt",
            message: "üìç GPS ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏à‡∏∞‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)" 
          };
        case "granted":
          return { 
            available: true, 
            permission: "granted",
            message: "‚úÖ GPS ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÅ‡∏•‡πâ‡∏ß" 
          };
        default:
          return { 
            available: true, 
            permission: "unknown",
            message: "üìç GPS ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" 
          };
      }
    } catch (error) {
      console.warn("‚ö†Ô∏è Permission check failed:", error);
      return { 
        available: true, 
        permission: "unknown",
        message: "üìç GPS ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" 
      };
    }
  };

  // ‚úÖ 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
  const isValidThaiCoordinates = (lat, lng) => {
    const isInThailand = (lat >= 5.6 && lat <= 20.5) && (lng >= 97.3 && lng <= 105.6);
    const isNotZero = lat !== 0 && lng !== 0;
    
    if (!isNotZero) {
      console.warn("‚ö†Ô∏è Invalid coordinates: Zero values");
      return false;
    }
    
    if (!isInThailand) {
      console.warn(`‚ö†Ô∏è Coordinates outside Thailand: ${lat}, ${lng}`);
      return false;
    }
    
    console.log(`‚úÖ Valid Thai coordinates: ${lat}, ${lng}`);
    return true;
  };

  // ‚úÖ 3. High Accuracy Position Tracking
  const watchHighAccuracyPosition = async () => {
    const options = {
      enableHighAccuracy: true,  // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á
      timeout: 15000,           // 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      maximumAge: 0,            // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ cache ‡πÄ‡∏Å‡πà‡∏≤
    };

    return new Promise((resolve, reject) => {
      let bestPosition = null;
      let bestAccuracy = Infinity;

      const watchId = navigator.geolocation.watchPosition(
        (position) => {
          const accuracy = position.coords.accuracy;
          console.log(`üì° GPS accuracy: ${accuracy}m (best: ${bestAccuracy}m)`);
          
          // ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
          if (accuracy < bestAccuracy) {
            bestAccuracy = accuracy;
            bestPosition = position;
            console.log(`üéØ New best position found: ${accuracy}m`);
          }
          
          // ‡∏´‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î
          if (accuracy <= 20) {
            navigator.geolocation.clearWatch(watchId);
            console.log(`‚úÖ High accuracy achieved: ${accuracy}m`);
            resolve(position);
          }
        },
        (err) => {
          navigator.geolocation.clearWatch(watchId);
          console.error("‚ùå Watch position error:", err);
          reject(err);
        },
        options
      );

      // Failsafe: ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏´‡∏≤‡∏Å‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
      setTimeout(() => {
        navigator.geolocation.clearWatch(watchId);
        if (bestPosition) {
          console.log(`‚è∞ Timeout: Using best position (${bestAccuracy}m)`);
          resolve(bestPosition);
        } else {
          reject(new Error("GPS timeout - no position found"));
        }
      }, options.timeout);
    });
  };

  // ‚úÖ 4. Fallback IP Location
  const getLocationFromIp = async () => {
    try {
      console.log("üåê Trying IP-based location...");
      const res = await fetch("https://ipapi.co/json/");
      
      if (!res.ok) throw new Error(`HTTP ${res.status}: IP geolocation failed`);
      
      const data = await res.json();
      
      if (data.latitude && data.longitude) {
        console.log("üìç IP location found:", data);
        return {
          coords: {
            latitude: parseFloat(data.latitude),
            longitude: parseFloat(data.longitude),
            accuracy: 5000, // IP location ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ï‡πà‡∏≥
          },
          source: "ip",
          city: data.city,
          region: data.region,
          country: data.country_name
        };
      } else {
        throw new Error("No coordinates in IP response");
      }
    } catch (err) {
      console.error("‚ùå IP location error:", err);
      throw err;
    }
  };

  // ‚úÖ 5. Enhanced Reverse Geocoding
  const reverseGeocode = async (lat, lng) => {
    try {
      console.log(`üåç Getting address for coordinates: ${lat}, ${lng}`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Å‡πà‡∏≠‡∏ô
      if (!isValidThaiCoordinates(lat, lng)) {
        throw new Error("Invalid coordinates for Thailand");
      }
      
      // ‡πÉ‡∏ä‡πâ OpenStreetMap API with optimized parameters
      const response = await fetch(
        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&addressdetails=1&accept-language=th,en&zoom=18&extratags=1`,
        {
          headers: {
            'User-Agent': 'TNP-FormHelpers/1.0'
          }
        }
      );

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: Failed to get address data`);
      }

      const data = await response.json();
      console.log("üó∫Ô∏è Reverse geocoding result:", data);

      if (data && data.address) {
        const addr = data.address;
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
        const addressComponents = [];
        
        // ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô
        if (addr.house_number) {
          addressComponents.push(addr.house_number);
        } else {
          addressComponents.push(Math.floor(Math.random() * 899) + 100);
        }
        
        // ‡∏ã‡∏≠‡∏¢/‡∏ñ‡∏ô‡∏ô
        if (addr.road) {
          if (addr.road.includes('‡∏ã‡∏≠‡∏¢')) {
            addressComponents.push(addr.road);
          } else {
            addressComponents.push(`‡∏ñ‡∏ô‡∏ô${addr.road}`);
          }
        }
        
        // ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
        if (addr.suburb) {
          addressComponents.push(`‡πÅ‡∏ñ‡∏ß ${addr.suburb}`);
        } else if (addr.neighbourhood) {
          addressComponents.push(`‡πÅ‡∏ñ‡∏ß ${addr.neighbourhood}`);
        }
        
        const finalAddress = addressComponents.join(' ');
        const province = addr.state || addr.province || addr.city || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î";
        const district = addr.city_district || addr.district || addr.county || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠";
        const subdistrict = addr.suburb || addr.village || addr.neighbourhood || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÅ‡∏Ç‡∏ß‡∏á/‡∏ï‡∏≥‡∏ö‡∏•";
        const zipCode = addr.postcode || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå";
        
        console.log("‚úÖ Address parsed successfully:", {
          address: finalAddress,
          province,
          district,
          subdistrict,
          zipCode
        });
        
        return {
          address: finalAddress,
          province,
          district,
          subdistrict,
          zipCode,
          rawData: data
        };
      }

      throw new Error("No address data found in response");
    } catch (error) {
      console.error("‚ùå Reverse geocoding error:", error);
      
      const randomHouseNumber = Math.floor(Math.random() * 899) + 100;
      
      return {
        address: `${randomHouseNumber} ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏≤‡∏Å GPS (${lat.toFixed(6)}, ${lng.toFixed(6)})`,
        province: "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î",
        district: "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠", 
        subdistrict: "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÅ‡∏Ç‡∏ß‡∏á/‡∏ï‡∏≥‡∏ö‡∏•",
        zipCode: "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå",
        error: error.message,
        fallback: true
      };
    }
  };

  // ‚úÖ 6. Auto-fill Address Data
  const fillAddressData = async (addressData) => {
    console.log("üöÄ Starting fillAddressData with:", addressData);
    
    try {
      const fullAddress = [
        addressData.address,
        addressData.subdistrict,
        addressData.district,
        addressData.province,
        addressData.zipCode
      ].filter(Boolean).join(' ');
      
      console.log("üè† Full address created:", fullAddress);
      
      const updatedInputList = {
        ...inputList,
        cus_address: fullAddress || "",
        cus_province_text: addressData.province || "",
        cus_district_text: addressData.district || "",
        cus_subdistrict_text: addressData.subdistrict || "",
        cus_zip_code: addressData.zipCode || "",
        cus_address_detail: addressData.address || "",
        cus_full_address: fullAddress || ""
      };
      
      console.log("üìù Dispatching updated inputList:", updatedInputList);
      dispatch(setInputList(updatedInputList));
      
      setHasFilledFromGps(true);
      console.log("‚úÖ GPS data filled successfully");
      
    } catch (error) {
      console.error("‚ùå Error in fillAddressData:", error);
    }
  };

  // ‚úÖ 7. Main GPS Function with Enhanced Features
  const handleGetCurrentLocation = async () => {
    if (isGettingLocation) {
      console.log("üö´ GPS already in progress");
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á GPS ‡∏Å‡πà‡∏≠‡∏ô
    const gpsStatus = await checkGPSAvailability();
    if (!gpsStatus.available) {
      setLocationStatus(gpsStatus.message);
      if (gpsStatus.action) {
        alert(`${gpsStatus.message}\n\n${gpsStatus.action}`);
      }
      return;
    }

    setIsGettingLocation(true);
    setLocationStatus("üéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á...");
    setGpsResult(null);
    setHasFilledFromGps(false);

    try {
      let position;
      let locationSource = "gps";

      // 1. ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ High Accuracy GPS ‡∏Å‡πà‡∏≠‡∏ô
      try {
        console.log("üõ∞Ô∏è Attempting high accuracy GPS...");
        position = await watchHighAccuracyPosition();
        console.log("‚úÖ High accuracy GPS successful");
      } catch (gpsError) {
        console.warn("‚ö†Ô∏è High accuracy GPS failed:", gpsError.message);
        
        // 2. ‡∏•‡∏≠‡∏á standard GPS
        try {
          console.log("üì° Fallback to standard GPS...");
          position = await new Promise((resolve, reject) => {
            navigator.geolocation.getCurrentPosition(
              resolve,
              reject,
              {
                enableHighAccuracy: false,
                timeout: 10000,
                maximumAge: 60000,
              }
            );
          });
          locationSource = "gps-standard";
          console.log("‚úÖ Standard GPS successful");
        } catch (standardGpsError) {
          console.warn("‚ö†Ô∏è Standard GPS failed:", standardGpsError.message);
          
          // 3. ‡πÉ‡∏ä‡πâ IP location ‡πÄ‡∏õ‡πá‡∏ô fallback ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
          try {
            console.log("üåê Fallback to IP location...");
            position = await getLocationFromIp();
            locationSource = "ip";
            console.log("‚úÖ IP location successful");
          } catch (ipError) {
            throw new Error(`All location methods failed. GPS: ${gpsError.message}, IP: ${ipError.message}`);
          }
        }
      }

      const { latitude, longitude, accuracy } = position.coords;
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î
      if (!isValidThaiCoordinates(latitude, longitude)) {
        throw new Error(`Invalid coordinates: ${latitude}, ${longitude} (outside Thailand or zero values)`);
      }

      console.log(`üéØ Location found via ${locationSource}:`, {
        lat: latitude,
        lng: longitude,
        accuracy: accuracy || 'unknown'
      });

      setLocationStatus(`üìç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: ${Math.round(accuracy || 0)}m)...`);

      // ‡∏ó‡∏≥ reverse geocoding
      const addressData = await reverseGeocode(latitude, longitude);
      
      if (addressData.fallback) {
        setLocationStatus(`‚ö†Ô∏è ‡πÑ‡∏î‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ`);
      } else {
        setLocationStatus(`‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${locationSource.toUpperCase()})`);
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
      const result = {
        coordinates: { latitude, longitude, accuracy },
        address: addressData,
        source: locationSource,
        timestamp: new Date().toISOString()
      };
      
      setGpsResult(result);
      console.log("üéâ Final GPS result:", result);

      // ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
      await fillAddressData(addressData);

    } catch (error) {
      console.error("‚ùå GPS Error:", error);
      setLocationStatus(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ: ${error.message}`);
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      if (error.message.includes("denied")) {
        alert("‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤:\n1. ‡∏Å‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô üîí ‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á'\n2. ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö\n3. ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
      } else if (error.message.includes("timeout")) {
        alert("‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤:\n1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï\n2. ‡πÄ‡∏õ‡∏¥‡∏î GPS ‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠\n3. ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£\n4. ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
      }
    } finally {
      setIsGettingLocation(false);
    }
  };

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ GPS ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡πÇ‡∏´‡∏•‡∏î
  useEffect(() => {
    const initGPS = async () => {
      const gpsStatus = await checkGPSAvailability();
      console.log("üéØ GPS Status:", gpsStatus);
      setLocationStatus(gpsStatus.message);
    };
    
    initGPS();
  }, []);

  return (
    <Box>
      {/* Header */}
      <Box 
        sx={{ 
          px: 2, 
          py: 3,
          background: `linear-gradient(135deg, ${PRIMARY_RED} 0%, ${SECONDARY_RED} 100%)`,
          color: "white",
          borderRadius: { xs: 0, sm: "0 0 16px 16px" },
          mb: { xs: 0, sm: 2 }
        }}
      >
        <Container maxWidth="md">
          <Box display="flex" alignItems="center" gap={2} mb={1}>
            <MdAssignment size={32} />
            <Box>
              <Typography
                variant={isMobile ? "h6" : "h5"}
                fontWeight={700}
                fontFamily="Kanit"
              >
                ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
              </Typography>
              <Typography 
                variant="body2" 
                sx={{ opacity: 0.9 }}
                fontFamily="Kanit"
              >
                {mode === "view" ? "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà" : "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ GPS ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ï‡∏¥‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"}
              </Typography>
            </Box>
          </Box>
          
          {/* Progress indicator for mobile */}
          {isMobile && mode !== "view" && (
            <Box sx={{ mt: 2 }}>
              <Typography variant="caption" sx={{ opacity: 0.8 }}>
                ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2 ‡∏à‡∏≤‡∏Å 3
              </Typography>
              <Box sx={{ 
                height: 4, 
                bgcolor: "rgba(255,255,255,0.3)", 
                borderRadius: 2,
                mt: 0.5,
                overflow: "hidden"
              }}>
                <Box sx={{ 
                  width: "66.66%", 
                  height: "100%", 
                  bgcolor: "white",
                  borderRadius: 2
                }} />
              </Box>
            </Box>
          )}
        </Container>
      </Box>

      <Container maxWidth="md" sx={{ pb: { xs: 10, sm: 4 }, pt: { xs: 2, sm: 0 } }}>
        {/* Contact Information - ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ */}
        <Accordion 
          defaultExpanded 
          sx={{ 
            mb: 2,
            borderRadius: 2,
            "&:before": { display: "none" },
            boxShadow: "0 2px 8px rgba(158, 0, 0, 0.1)"
          }}
        >
          <AccordionSummary 
            expandIcon={<MdExpandMore size={24} />}
            sx={{
              bgcolor: "white",
              "& .MuiAccordionSummary-content": {
                alignItems: "center",
                gap: 2
              }
            }}
          >
            <MdPhone size={24} color={PRIMARY_RED} />
            <Box>
              <Typography fontWeight={600} fontFamily="Kanit" color={PRIMARY_RED}>
                ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
              </Typography>
              <Typography variant="caption" color="text.secondary" fontFamily="Kanit">
                ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å)
              </Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails sx={{ bgcolor: BACKGROUND_COLOR }}>
            <Grid container spacing={2}>
              <Grid xs={12} sm={6}>
                <TextField
                  name="cus_tel_1"
                  label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏´‡∏•‡∏±‡∏Å"
                  value={inputList.cus_tel_1 || ""}
                  onChange={handleInputChange}
                  fullWidth
                  required
                  error={!!errors.cus_tel_1}
                  helperText={errors.cus_tel_1}
                  disabled={mode === "view"}
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô 02-123-4567"
                  size="small"
                  sx={{ bgcolor: "white" }}
                  InputProps={{
                    style: { fontFamily: "Kanit", fontSize: 14 },
                  }}
                  InputLabelProps={{
                    style: { fontFamily: "Kanit", fontSize: 14 },
                  }}
                />
              </Grid>
              <Grid xs={12} sm={6}>
                <TextField
                  name="cus_tel_2"
                  label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á"
                  value={inputList.cus_tel_2 || ""}
                  onChange={handleInputChange}
                  fullWidth
                  error={!!errors.cus_tel_2}
                  helperText={errors.cus_tel_2}
                  disabled={mode === "view"}
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô 08-1234-5678"
                  size="small"
                  sx={{ bgcolor: "white" }}
                  InputProps={{
                    style: { fontFamily: "Kanit", fontSize: 14 },
                  }}
                  InputLabelProps={{
                    style: { fontFamily: "Kanit", fontSize: 14 },
                  }}
                />
              </Grid>
              <Grid xs={12}>
                <TextField
                  name="cus_email"
                  label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
                  value={inputList.cus_email || ""}
                  onChange={handleInputChange}
                  fullWidth
                  type="email"
                  error={!!errors.cus_email}
                  helperText={errors.cus_email}
                  disabled={mode === "view"}
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô contact@company.com"
                  size="small"
                  sx={{ bgcolor: "white" }}
                  InputProps={{
                    style: { fontFamily: "Kanit", fontSize: 14 },
                  }}
                  InputLabelProps={{
                    style: { fontFamily: "Kanit", fontSize: 14 },
                  }}
                />
              </Grid>
            </Grid>
          </AccordionDetails>
        </Accordion>

        {/* GPS Auto-fill Section */}
        <Accordion 
          sx={{ 
            mb: 2,
            borderRadius: 2,
            "&:before": { display: "none" },
            boxShadow: "0 2px 8px rgba(158, 0, 0, 0.1)"
          }}
        >
          <AccordionSummary 
            expandIcon={<MdExpandMore size={24} />}
            sx={{
              bgcolor: "white",
              "& .MuiAccordionSummary-content": {
                alignItems: "center",
                gap: 2
              }
            }}
          >
            <MdGpsFixed size={24} color={PRIMARY_RED} />
            <Box>
              <Typography fontWeight={600} fontFamily="Kanit" color={PRIMARY_RED}>
                üìç GPS ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
              </Typography>
              <Typography variant="caption" color="text.secondary" fontFamily="Kanit">
                ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á
              </Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails sx={{ bgcolor: BACKGROUND_COLOR }}>
            <Stack spacing={2}>
              {/* GPS Button */}
              <Box sx={{ display: "flex", gap: 2, alignItems: "center", flexWrap: "wrap" }}>
                <Button
                  variant="contained"
                  onClick={handleGetCurrentLocation}
                  disabled={isGettingLocation || mode === "view"}
                  startIcon={isGettingLocation ? <CircularProgress size={20} color="inherit" /> : <MdGpsFixed />}
                  sx={{
                    bgcolor: PRIMARY_RED,
                    color: "white",
                    fontFamily: "Kanit",
                    fontWeight: 600,
                    "&:hover": {
                      bgcolor: SECONDARY_RED,
                    },
                    "&:disabled": {
                      bgcolor: "#ccc",
                    },
                  }}
                >
                  {isGettingLocation ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..." : "üéØ ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á)"}
                </Button>
                
                {hasFilledFromGps && (
                  <Chip
                    icon={<MdGpsFixed />}
                    label="‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å GPS ‡πÅ‡∏•‡πâ‡∏ß"
                    color="success"
                    size="small"
                    sx={{ fontFamily: "Kanit" }}
                  />
                )}
              </Box>

              {/* GPS Status */}
              {locationStatus && (
                <Alert 
                  severity={
                    locationStatus.includes("‚ùå") ? "error" :
                    locationStatus.includes("‚ö†Ô∏è") ? "warning" :
                    locationStatus.includes("‚úÖ") ? "success" : "info"
                  }
                  sx={{ fontFamily: "Kanit", whiteSpace: "pre-line" }}
                >
                  {locationStatus}
                </Alert>
              )}

              {/* GPS Result Display */}
              {gpsResult && (
                <Box sx={{ p: 2, bgcolor: "rgba(46, 125, 50, 0.1)", borderRadius: 1, border: "1px solid rgba(46, 125, 50, 0.3)" }}>
                  <Typography variant="subtitle2" fontWeight={600} color="success.main" fontFamily="Kanit" mb={1}>
                    üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GPS ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:
                  </Typography>
                  <Typography variant="caption" fontFamily="monospace" sx={{ display: "block", whiteSpace: "pre-line" }}>
                    üéØ ‡∏û‡∏¥‡∏Å‡∏±‡∏î: {gpsResult.coordinates.latitude.toFixed(6)}, {gpsResult.coordinates.longitude.toFixed(6)}{'\n'}
                    üìè ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: ¬±{Math.round(gpsResult.coordinates.accuracy || 0)} ‡πÄ‡∏°‡∏ï‡∏£{'\n'}
                    üîó ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {gpsResult.source.toUpperCase()}{'\n'}
                    üïí ‡πÄ‡∏ß‡∏•‡∏≤: {new Date(gpsResult.timestamp).toLocaleString('th-TH')}
                  </Typography>
                </Box>
              )}
            </Stack>
          </AccordionDetails>
        </Accordion>

        {/* Address Form Section */}
        <Accordion 
          sx={{ 
            mb: 2,
            borderRadius: 2,
            "&:before": { display: "none" },
            boxShadow: "0 2px 8px rgba(158, 0, 0, 0.1)"
          }}
        >
          <AccordionSummary 
            expandIcon={<MdExpandMore size={24} />}
            sx={{
              bgcolor: "white",
              "& .MuiAccordionSummary-content": {
                alignItems: "center",
                gap: 2
              }
            }}
          >
            <MdHome size={24} color={PRIMARY_RED} />
            <Box>
              <Typography fontWeight={600} fontFamily="Kanit" color={PRIMARY_RED}>
                ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
              </Typography>
              <Typography variant="caption" color="text.secondary" fontFamily="Kanit">
                ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏™‡πà‡∏á (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ GPS ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ)
              </Typography>
            </Box>
          </AccordionSummary>
          <AccordionDetails sx={{ bgcolor: BACKGROUND_COLOR }}>
            <Stack spacing={3}>
              {/* Full Address - ‡πÄ‡∏≠‡∏≤ required ‡∏≠‡∏≠‡∏Å */}
              <TextField
                name="cus_address"
                label="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏ï‡πá‡∏° (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)"
                value={inputList.cus_address || ""}
                onChange={handleInputChange}
                fullWidth
                multiline
                rows={3}
                error={!!errors.cus_address}
                helperText={errors.cus_address || "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ GPS ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ)"}
                disabled={mode === "view"}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô 123 ‡∏ã‡∏≠‡∏¢‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó 21 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡πÅ‡∏Ç‡∏ß‡∏á‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡∏¢‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ ‡πÄ‡∏Ç‡∏ï‡∏ß‡∏±‡∏í‡∏ô‡∏≤ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ 10110"
                size="small"
                sx={{ bgcolor: "white" }}
                InputProps={{
                  style: { fontFamily: "Kanit", fontSize: 14 },
                }}
                InputLabelProps={{
                  style: { fontFamily: "Kanit", fontSize: 14 },
                }}
              />

              {/* Address Components Row */}
              <Grid container spacing={2}>
                <Grid xs={12} sm={6}>
                  <TextField
                    name="cus_province_text"
                    label="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
                    value={inputList.cus_province_text || ""}
                    onChange={handleInputChange}
                    fullWidth
                    error={!!errors.cus_province_text}
                    helperText={errors.cus_province_text}
                    disabled={mode === "view"}
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£"
                    size="small"
                    sx={{ bgcolor: "white" }}
                    InputProps={{
                      style: { fontFamily: "Kanit", fontSize: 14 },
                    }}
                    InputLabelProps={{
                      style: { fontFamily: "Kanit", fontSize: 14 },
                    }}
                  />
                </Grid>
                <Grid xs={12} sm={6}>
                  <TextField
                    name="cus_district_text"
                    label="‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠"
                    value={inputList.cus_district_text || ""}
                    onChange={handleInputChange}
                    fullWidth
                    error={!!errors.cus_district_text}
                    helperText={errors.cus_district_text}
                    disabled={mode === "view"}
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏±‡∏í‡∏ô‡∏≤"
                    size="small"
                    sx={{ bgcolor: "white" }}
                    InputProps={{
                      style: { fontFamily: "Kanit", fontSize: 14 },
                    }}
                    InputLabelProps={{
                      style: { fontFamily: "Kanit", fontSize: 14 },
                    }}
                  />
                </Grid>
                <Grid xs={12} sm={6}>
                  <TextField
                    name="cus_subdistrict_text"
                    label="‡πÅ‡∏Ç‡∏ß‡∏á/‡∏ï‡∏≥‡∏ö‡∏•"
                    value={inputList.cus_subdistrict_text || ""}
                    onChange={handleInputChange}
                    fullWidth
                    error={!!errors.cus_subdistrict_text}
                    helperText={errors.cus_subdistrict_text}
                    disabled={mode === "view"}
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡∏¢‡πÄ‡∏´‡∏ô‡∏∑‡∏≠"
                    size="small"
                    sx={{ bgcolor: "white" }}
                    InputProps={{
                      style: { fontFamily: "Kanit", fontSize: 14 },
                    }}
                    InputLabelProps={{
                      style: { fontFamily: "Kanit", fontSize: 14 },
                    }}
                  />
                </Grid>
                <Grid xs={12} sm={6}>
                  <TextField
                    name="cus_zip_code"
                    label="‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå"
                    value={inputList.cus_zip_code || ""}
                    onChange={handleInputChange}
                    fullWidth
                    error={!!errors.cus_zip_code}
                    helperText={errors.cus_zip_code}
                    disabled={mode === "view"}
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô 10110"
                    size="small"
                    sx={{ bgcolor: "white" }}
                    inputProps={{
                      maxLength: 5,
                      pattern: "[0-9]*",
                    }}
                    InputProps={{
                      style: { fontFamily: "Kanit", fontSize: 14 },
                    }}
                    InputLabelProps={{
                      style: { fontFamily: "Kanit", fontSize: 14 },
                    }}
                  />
                </Grid>
              </Grid>
            </Stack>
          </AccordionDetails>
        </Accordion>

        {/* Contact Information - ‡∏•‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡∏ö‡∏ô‡πÅ‡∏•‡πâ‡∏ß */}
      </Container>
    </Box>
  );
};

// ‚úÖ 8. Parse Full Address Function (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CustomerViewDialog.jsx)
export const parseFullAddress = (fullAddress) => {
  if (!fullAddress || typeof fullAddress !== 'string') {
    return {
      address: '',
      subdistrict: '',
      district: '',
      province: '',
      zipCode: ''
    };
  }

  try {
    // ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÅ‡∏¢‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
    const parts = fullAddress.trim().split(' ');
    
    // ‡∏´‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå (5 ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
    const zipCode = parts[parts.length - 1];
    const isZipCode = /^\d{5}$/.test(zipCode);
    
    if (isZipCode) {
      const addressParts = parts.slice(0, -1);
      const province = addressParts[addressParts.length - 1] || '';
      const district = addressParts[addressParts.length - 2] || '';
      const subdistrict = addressParts[addressParts.length - 3] || '';
      const address = addressParts.slice(0, -3).join(' ') || '';
      
      return {
        address: address.trim(),
        subdistrict: subdistrict.trim(),
        district: district.trim(),
        province: province.trim(),
        zipCode: zipCode.trim()
      };
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
      return {
        address: fullAddress.trim(),
        subdistrict: '',
        district: '',
        province: '',
        zipCode: ''
      };
    }
  } catch (error) {
    console.warn('Error parsing address:', error);
    return {
      address: fullAddress.trim(),
      subdistrict: '',
      district: '',
      province: '',
      zipCode: ''
    };
  }
};

export default BusinessDetailStepSimple;
