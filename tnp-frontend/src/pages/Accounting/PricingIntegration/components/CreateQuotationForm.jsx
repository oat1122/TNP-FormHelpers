import React, { useState, useEffect } from 'react';
import {
    Box,
    Container,
    Typography,
    Grid,
    TextField,
    Card,
    CardContent,
    Divider,
    Radio,
    RadioGroup,
    FormControlLabel,
    FormControl,
    FormLabel,
    Chip,
    InputAdornment,
    Alert,
    Stack,
    IconButton,
    Tooltip,
    Avatar,
    Dialog,
    DialogTitle,
    DialogContent,
    DialogActions,
    Slide,
} from '@mui/material';
import {
    Assignment as AssignmentIcon,
    Business as BusinessIcon,
    Calculate as CalculateIcon,
    Payment as PaymentIcon,
    ArrowBack as ArrowBackIcon,
    Save as SaveIcon,
    Send as SendIcon,
    SaveAlt as DraftIcon,
    Info as InfoIcon,
    CalendarToday as CalendarIcon,
    CheckCircle as CheckCircleIcon,
    Visibility as VisibilityIcon,
    Print as PrintIcon,
} from '@mui/icons-material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import PricingRequestNotesButton from './PricingRequestNotesButton';
import QuotationPreview from './QuotationPreview';
import CustomerEditCard from './CustomerEditCard';
import {
    StyledPaper,
    SectionHeader,
    InfoCard,
    PrimaryButton,
    SecondaryButton,
} from './styles/QuotationStyles';

const Transition = React.forwardRef(function Transition(props, ref) {
    return <Slide direction="up" ref={ref} {...props} />;
});

const CreateQuotationForm = ({
    selectedPricingRequests = [],
    onBack,
    onSave,
    onSubmit
}) => {
    const [formData, setFormData] = useState({
        // Customer & Basic Info (auto-filled from PR)
        customer: {},
        pricingRequests: selectedPricingRequests,

        // Pricing Calculation
        items: [],
        subtotal: 0,
        vat: 0,
        total: 0,

        // Payment Terms
        paymentMethod: 'credit_30',
        depositPercentage: '50',
        customDepositPercentage: '',
        depositAmount: 0,
        remainingAmount: 0,
        dueDate: null,
        notes: '',
    });

    const [isSubmitting, setIsSubmitting] = useState(false);
    const [showPreview, setShowPreview] = useState(false);

    // Calculate totals when items change
    useEffect(() => {
        const subtotal = formData.items.reduce((sum, item) => sum + (item.quantity * item.unitPrice), 0);
        const vat = subtotal * 0.07;
        const total = subtotal + vat;

        const depositPercentage = formData.depositPercentage === 'custom'
            ? parseFloat(formData.customDepositPercentage) || 0
            : parseFloat(formData.depositPercentage) || 0;

        const depositAmount = total * (depositPercentage / 100);
        const remainingAmount = total - depositAmount;

        setFormData(prev => ({
            ...prev,
            subtotal,
            vat,
            total,
            depositAmount,
            remainingAmount,
        }));
    }, [formData.items, formData.depositPercentage, formData.customDepositPercentage]);

    // Initialize items from pricing requests
    useEffect(() => {
        console.log('üîç Debug CreateQuotationForm - selectedPricingRequests:', selectedPricingRequests);
        console.log('üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô selectedPricingRequests:', selectedPricingRequests.length);

        if (selectedPricingRequests && selectedPricingRequests.length > 0) {
            // Get customer info from first pricing request
            const customer = selectedPricingRequests[0]?.customer || {};
            console.log('üë§ Customer data:', customer);

            // Map all selected pricing requests to items
            const items = selectedPricingRequests.map((pr, index) => {
                console.log(`üìù Processing PR ${index + 1}:`, pr);
                return {
                    id: pr.pr_id || pr.id || `temp_${index}`,
                    pricingRequestId: pr.pr_id, // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Notes Button
                    name: pr.pr_work_name || pr.work_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô',
                    pattern: pr.pr_pattern || pr.pattern || '',
                    fabricType: pr.pr_fabric_type || pr.fabric_type || pr.material || '',
                    color: pr.pr_color || pr.color || '',
                    size: pr.pr_sizes || pr.sizes || pr.size || '',
                    quantity: parseInt(pr.pr_quantity || pr.quantity || 1, 10),
                    unitPrice: pr.pr_unit_price ? parseFloat(pr.pr_unit_price) : 0, // Sales can adjust
                    total: (pr.pr_unit_price ? parseFloat(pr.pr_unit_price) : 0) * (parseInt(pr.pr_quantity || pr.quantity || 1, 10)),
                    notes: pr.pr_notes || pr.notes || '',
                    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ
                    originalData: pr,
                };
            });

            console.log('‚úÖ Processed items:', items);
            console.log('üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô items ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ:', items.length);

            // Set due date to 30 days from today for credit payment
            const dueDate = new Date();
            dueDate.setDate(dueDate.getDate() + 30);

            setFormData(prev => ({
                ...prev,
                customer,
                items,
                dueDate,
            }));
        } else {
            console.log('‚ö†Ô∏è No selectedPricingRequests provided or empty array');
        }
    }, [selectedPricingRequests]);

    const handleItemPriceChange = (itemId, unitPrice) => {
        setFormData(prev => ({
            ...prev,
            items: prev.items.map(item =>
                item.id === itemId
                    ? { ...item, unitPrice: parseFloat(unitPrice) || 0, total: (parseFloat(unitPrice) || 0) * item.quantity }
                    : item
            ),
        }));
    };

    const handleItemQuantityChange = (itemId, quantity) => {
        const parsedQty = parseInt(quantity, 10) || 0;
        setFormData(prev => ({
            ...prev,
            items: prev.items.map(item =>
                item.id === itemId
                    ? {
                          ...item,
                          quantity: parsedQty,
                          total: (item.unitPrice || 0) * parsedQty,
                      }
                    : item
            ),
        }));
    };

    const handlePaymentMethodChange = (method) => {
        let dueDate = new Date();
        if (method === 'credit_30') {
            dueDate.setDate(dueDate.getDate() + 30);
        } else if (method === 'credit_60') {
            dueDate.setDate(dueDate.getDate() + 60);
        }

        setFormData(prev => ({
            ...prev,
            paymentMethod: method,
            dueDate: method === 'cash' ? null : dueDate,
        }));
    };

    const handleSubmitForm = async (action) => {
        setIsSubmitting(true);
        try {
            const submitData = {
                ...formData,
                action, // 'draft', 'review', or 'final'
            };

            if (action === 'draft') {
                await onSave(submitData);
            } else {
                await onSubmit(submitData);
            }
        } catch (error) {
            console.error('Error submitting form:', error);
        } finally {
            setIsSubmitting(false);
        }
    };

    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('th-TH', {
            style: 'currency',
            currency: 'THB',
        }).format(amount);
    };

    const formatDate = (date) => {
        if (!date) return '';
        return new Date(date).toLocaleDateString('th-TH', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
        });
    };

    return (
        <Box sx={{ bgcolor: '#F8F9FA', minHeight: '100vh', py: 3 }}>
            <Container maxWidth="lg">
                {/* Header */}
                <Box sx={{ mb: 3, display: 'flex', alignItems: 'center', gap: 2 }}>
                    <Tooltip title="‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°">
                        <IconButton
                            onClick={onBack}
                            sx={{
                                bgcolor: '#FFFFFF',
                                color: '#B20000',
                                border: '2px solid #B20000',
                                '&:hover': {
                                    bgcolor: 'rgba(178, 0, 0, 0.05)',
                                    transform: 'translateX(-2px)',
                                },
                                transition: 'all 0.3s ease-in-out',
                            }}
                        >
                            <ArrowBackIcon />
                        </IconButton>
                    </Tooltip>
                    <Box>
                        <Typography variant="h4" fontWeight={700} color="#900F0F">
                            üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
                        </Typography>
                        <Typography variant="subtitle1" color="text.secondary">
                            ‡∏à‡∏≤‡∏Å {formData.items.length} ‡∏á‡∏≤‡∏ô ({selectedPricingRequests.length} ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) ‚Ä¢ {formData.customer?.cus_company || '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...'}
                        </Typography>
                        {selectedPricingRequests.length !== formData.items.length && (
                            <Typography variant="caption" color="warning.main" sx={{ display: 'block' }}>
                                ‚ö†Ô∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Console ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debug
                            </Typography>
                        )}
                    </Box>
                </Box>

                <Grid container spacing={3}>
                    {/* Step 1: Work Information */}
                    <Grid item xs={12}>
                        <StyledPaper>
                            <SectionHeader>
                                <Avatar sx={{ bgcolor: '#FFFFFF', color: '#900F0F' }}>
                                    <AssignmentIcon />
                                </Avatar>
                                <Box>
                                    <Typography variant="h6" fontWeight={600}>
                                        ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Pricing Request
                                    </Typography>
                                    <Typography variant="body2" sx={{ opacity: 0.9 }}>
                                        ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö Pricing Request ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                                    </Typography>
                                </Box>
                            </SectionHeader>

                            {/* Customer Information - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ */}
                            <CustomerEditCard 
                                customer={formData.customer}
                                onUpdate={(updatedCustomer) => {
                                    setFormData(prev => ({
                                        ...prev,
                                        customer: updatedCustomer
                                    }));
                                }}
                            />

                            {/* Work Details */}
                            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                                <Typography variant="h6" fontWeight={600} color="#900F0F">
                                    ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô ({formData.items.length} ‡∏á‡∏≤‡∏ô)
                                </Typography>
                                {formData.items.length === 0 && (
                                    <Alert severity="warning" sx={{ flexGrow: 1, ml: 2 }}>
                                        ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
                                    </Alert>
                                )}
                            </Box>

                            {formData.items.length === 0 ? (
                                <InfoCard sx={{ mb: 2 }}>
                                    <CardContent sx={{ textAlign: 'center', py: 4 }}>
                                        <Typography variant="h6" color="text.secondary" gutterBottom>
                                            üö´ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô
                                        </Typography>
                                        <Typography variant="body2" color="text.secondary">
                                            ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Console ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Debug
                                        </Typography>
                                    </CardContent>
                                </InfoCard>
                            ) : (
                                formData.items.map((item, index) => (
                                    <InfoCard key={item.id} sx={{ mb: 2 }}>
                                        <CardContent>
                                            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                                                <Typography variant="h6" fontWeight={600} color="#900F0F">
                                                    ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà {index + 1}: {item.name}
                                                </Typography>
                                                <Chip
                                                    label={`${item.quantity} ‡∏ä‡∏¥‡πâ‡∏ô`}
                                                    color="primary"
                                                    sx={{
                                                        bgcolor: '#900F0F',
                                                        color: '#FFFFFF',
                                                        fontWeight: 600,
                                                    }}
                                                />
                                            </Box>

                                            <Grid container spacing={2}>
                                                {item.pattern && (
                                                    <Grid item xs={6} md={3}>
                                                        <Typography variant="caption" color="text.secondary">
                                                            ‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô
                                                        </Typography>
                                                        <Typography variant="body2" fontWeight={500}>
                                                            {item.pattern}
                                                        </Typography>
                                                    </Grid>
                                                )}
                                                {item.fabricType && (
                                                    <Grid item xs={6} md={3}>
                                                        <Typography variant="caption" color="text.secondary">
                                                            ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡πâ‡∏≤
                                                        </Typography>
                                                        <Typography variant="body2" fontWeight={500}>
                                                            {item.fabricType}
                                                        </Typography>
                                                    </Grid>
                                                )}
                                                {item.color && (
                                                    <Grid item xs={6} md={3}>
                                                        <Typography variant="caption" color="text.secondary">
                                                            ‡∏™‡∏µ
                                                        </Typography>
                                                        <Typography variant="body2" fontWeight={500}>
                                                            {item.color}
                                                        </Typography>
                                                    </Grid>
                                                )}
                                                {item.size && (
                                                    <Grid item xs={6} md={3}>
                                                        <Typography variant="caption" color="text.secondary">
                                                            ‡∏Ç‡∏ô‡∏≤‡∏î
                                                        </Typography>
                                                        <Typography variant="body2" fontWeight={500}>
                                                            {item.size}
                                                        </Typography>
                                                    </Grid>
                                                )}
                                            </Grid>

                                            {item.notes && (
                                                <Box sx={{ mt: 2, p: 2, bgcolor: 'rgba(227, 98, 100, 0.1)', borderRadius: 2 }}>
                                                    <Typography variant="caption" color="#B20000" fontWeight={600}>
                                                        ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏à‡∏≤‡∏Å Pricing Request:
                                                    </Typography>
                                                    <Typography variant="body2" color="text.secondary">
                                                        {item.notes}
                                                    </Typography>
                                                </Box>
                                            )}
                                        </CardContent>
                                    </InfoCard>
                                ))
                            )}
                        </StyledPaper>
                    </Grid>

                    {/* Step 2: Price Calculation */}
                    <Grid item xs={12}>
                        <StyledPaper>
                            <SectionHeader>
                                <Avatar sx={{ bgcolor: '#FFFFFF', color: '#900F0F' }}>
                                    <CalculateIcon />
                                </Avatar>
                                <Box>
                                    <Typography variant="h6" fontWeight={600}>
                                        ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤
                                    </Typography>
                                    <Typography variant="body2" sx={{ opacity: 0.9 }}>
                                        ‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏á‡∏≤‡∏ô
                                    </Typography>
                                </Box>
                            </SectionHeader>

                            {/* Pricing Items */}
                            {formData.items.map((item, index) => (
                                <Card key={item.id} sx={{
                                    mb: 3,
                                    border: '2px solid #E36264',
                                    borderRadius: '16px',
                                    background: 'linear-gradient(135deg, #FFFFFF 0%, #FAFAFA 100%)',
                                    boxShadow: '0 4px 20px rgba(144, 15, 15, 0.08)',
                                    transition: 'all 0.3s ease-in-out',
                                    '&:hover': {
                                        transform: 'translateY(-2px)',
                                        boxShadow: '0 8px 32px rgba(144, 15, 15, 0.12)',
                                    }
                                }}>
                                    <CardContent sx={{ p: 4 }}>
                                        {/* Header Section */}
                                        <Box sx={{
                                            display: 'flex',
                                            justifyContent: 'space-between',
                                            alignItems: 'center',
                                            mb: 3,
                                            pb: 2,
                                            borderBottom: '2px solid #F0F0F0'
                                        }}>
                                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                                                <Box>
                                                    <Typography variant="h5" fontWeight={700} color="#900F0F" sx={{ mb: 1 }}>
                                                        ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà {index + 1}
                                                    </Typography>
                                                    <Typography variant="h6" fontWeight={600} color="text.primary">
                                                        {item.name}
                                                    </Typography>
                                                </Box>
                                                <PricingRequestNotesButton
                                                    pricingRequestId={item.pricingRequestId || item.pr_id}
                                                    workName={item.name}
                                                    variant="icon"
                                                    size="medium"
                                                />
                                            </Box>
                                            <Chip
                                                label={`${item.quantity} ‡∏ä‡∏¥‡πâ‡∏ô`}
                                                size="large"
                                                sx={{
                                                    bgcolor: '#900F0F',
                                                    color: '#FFFFFF',
                                                    fontWeight: 700,
                                                    fontSize: '1rem',
                                                    px: 2,
                                                    py: 1,
                                                    borderRadius: '20px',
                                                }}
                                            />
                                        </Box>

                                        {/* Product Details Section */}
                                        <Box sx={{ mb: 3 }}>
                                            <Typography variant="h6" fontWeight={600} color="#900F0F" sx={{ mb: 2 }}>
                                                üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                                            </Typography>
                                            <Grid container spacing={2}>
                                                <Grid item xs={12} md={3}>
                                                    <Box sx={{
                                                        p: 2,
                                                        bgcolor: 'rgba(144, 15, 15, 0.05)',
                                                        borderRadius: '12px',
                                                        border: '1px solid rgba(144, 15, 15, 0.1)'
                                                    }}>
                                                        <Typography variant="caption" fontWeight={600} color="#900F0F" sx={{ mb: 1, display: 'block' }}>
                                                            ‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô
                                                        </Typography>
                                                        <TextField
                                                            fullWidth
                                                            size="small"
                                                            placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô"
                                                            value={item.pattern}
                                                            onChange={(e) => setFormData(prev => ({
                                                                ...prev,
                                                                items: prev.items.map(i =>
                                                                    i.id === item.id ? { ...i, pattern: e.target.value } : i
                                                                )
                                                            }))}
                                                            sx={{
                                                                '& .MuiOutlinedInput-root': {
                                                                    bgcolor: '#FFFFFF',
                                                                    '&.Mui-focused fieldset': {
                                                                        borderColor: '#900F0F',
                                                                        borderWidth: '2px'
                                                                    },
                                                                },
                                                            }}
                                                        />
                                                    </Box>
                                                </Grid>
                                                <Grid item xs={12} md={3}>
                                                    <Box sx={{
                                                        p: 2,
                                                        bgcolor: 'rgba(144, 15, 15, 0.05)',
                                                        borderRadius: '12px',
                                                        border: '1px solid rgba(144, 15, 15, 0.1)'
                                                    }}>
                                                        <Typography variant="caption" fontWeight={600} color="#900F0F" sx={{ mb: 1, display: 'block' }}>
                                                            ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡πâ‡∏≤
                                                        </Typography>
                                                        <TextField
                                                            fullWidth
                                                            size="small"
                                                            placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡πâ‡∏≤"
                                                            value={item.fabricType}
                                                            onChange={(e) => setFormData(prev => ({
                                                                ...prev,
                                                                items: prev.items.map(i =>
                                                                    i.id === item.id ? { ...i, fabricType: e.target.value } : i
                                                                )
                                                            }))}
                                                            sx={{
                                                                '& .MuiOutlinedInput-root': {
                                                                    bgcolor: '#FFFFFF',
                                                                    '&.Mui-focused fieldset': {
                                                                        borderColor: '#900F0F',
                                                                        borderWidth: '2px'
                                                                    },
                                                                },
                                                            }}
                                                        />
                                                    </Box>
                                                </Grid>
                                                <Grid item xs={12} md={3}>
                                                    <Box sx={{
                                                        p: 2,
                                                        bgcolor: 'rgba(144, 15, 15, 0.05)',
                                                        borderRadius: '12px',
                                                        border: '1px solid rgba(144, 15, 15, 0.1)'
                                                    }}>
                                                        <Typography variant="caption" fontWeight={600} color="#900F0F" sx={{ mb: 1, display: 'block' }}>
                                                            ‡∏™‡∏µ
                                                        </Typography>
                                                        <TextField
                                                            fullWidth
                                                            size="small"
                                                            placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏µ"
                                                            value={item.color}
                                                            onChange={(e) => setFormData(prev => ({
                                                                ...prev,
                                                                items: prev.items.map(i =>
                                                                    i.id === item.id ? { ...i, color: e.target.value } : i
                                                                )
                                                            }))}
                                                            sx={{
                                                                '& .MuiOutlinedInput-root': {
                                                                    bgcolor: '#FFFFFF',
                                                                    '&.Mui-focused fieldset': {
                                                                        borderColor: '#900F0F',
                                                                        borderWidth: '2px'
                                                                    },
                                                                },
                                                            }}
                                                        />
                                                    </Box>
                                                </Grid>
                                                <Grid item xs={12} md={3}>
                                                    <Box sx={{
                                                        p: 2,
                                                        bgcolor: 'rgba(144, 15, 15, 0.05)',
                                                        borderRadius: '12px',
                                                        border: '1px solid rgba(144, 15, 15, 0.1)'
                                                    }}>
                                                        <Typography variant="caption" fontWeight={600} color="#900F0F" sx={{ mb: 1, display: 'block' }}>
                                                            ‡∏Ç‡∏ô‡∏≤‡∏î
                                                        </Typography>
                                                        <TextField
                                                            fullWidth
                                                            size="small"
                                                            placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡∏ô‡∏≤‡∏î"
                                                            value={item.size}
                                                            onChange={(e) => setFormData(prev => ({
                                                                ...prev,
                                                                items: prev.items.map(i =>
                                                                    i.id === item.id ? { ...i, size: e.target.value } : i
                                                                )
                                                            }))}
                                                            sx={{
                                                                '& .MuiOutlinedInput-root': {
                                                                    bgcolor: '#FFFFFF',
                                                                    '&.Mui-focused fieldset': {
                                                                        borderColor: '#900F0F',
                                                                        borderWidth: '2px'
                                                                    },
                                                                },
                                                            }}
                                                        />
                                                    </Box>
                                                </Grid>
                                            </Grid>
                                        </Box>

                                        {/* Pricing Section */}
                                        <Grid container spacing={3} alignItems="stretch">
                                            <Grid item xs={12} md={4}>
                                                <Box sx={{
                                                    p: 3,
                                                    bgcolor: 'linear-gradient(135deg, rgba(76, 175, 80, 0.05) 0%, rgba(76, 175, 80, 0.1) 100%)',
                                                    borderRadius: '16px',
                                                    border: '2px solid #4CAF50',
                                                    textAlign: 'center',
                                                    height: '100%',
                                                    display: 'flex',
                                                    flexDirection: 'column',
                                                    justifyContent: 'space-between',
                                                    minHeight: '140px'
                                                }}>
                                                    <Typography variant="caption" fontWeight={600} color="#4CAF50" sx={{ mb: 1, display: 'block' }}>
                                                        üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢
                                                    </Typography>
                                                    <TextField
                                                        fullWidth
                                                        type="number"
                                                        value={item.unitPrice || ''}
                                                        onChange={(e) => handleItemPriceChange(item.id, e.target.value)}
                                                        placeholder="0"
                                                        InputProps={{
                                                            startAdornment: <InputAdornment position="start">
                                                                <Typography variant="h6" fontWeight={700} color="#4CAF50">‡∏ø</Typography>
                                                            </InputAdornment>,
                                                        }}
                                                        inputProps={{
                                                            inputMode: 'decimal',
                                                            min: 0,
                                                            step: 'any'
                                                        }}
                                                        sx={{
                                                            '& .MuiOutlinedInput-root': {
                                                                bgcolor: '#FFFFFF',
                                                                fontSize: '1.2rem',
                                                                fontWeight: 600,
                                                                '&.Mui-focused fieldset': {
                                                                    borderColor: '#4CAF50',
                                                                    borderWidth: '3px'
                                                                },
                                                            },
                                                            '& input': {
                                                                textAlign: 'center',
                                                                fontSize: '1.2rem',
                                                                fontWeight: 600,
                                                            }
                                                        }}
                                                    />
                                                </Box>
                                            </Grid>
                                            <Grid item xs={6} md={4}>
                                                <Box
                                                    sx={{
                                                        p: 3,
                                                        bgcolor: 'rgba(33, 150, 243, 0.05)',
                                                        borderRadius: '16px',
                                                        border: '2px solid #2196F3',
                                                        textAlign: 'center',
                                                        height: '100%',
                                                        display: 'flex',
                                                        flexDirection: 'column',
                                                        justifyContent: 'center',
                                                        minHeight: '140px',
                                                        gap: 1,
                                                    }}
                                                >
                                                    <Typography variant="caption" fontWeight={600} color="#2196F3" sx={{ display: 'block' }}>
                                                        üì¶ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
                                                    </Typography>
                                                    <TextField
                                                        type="number"
                                                        value={item.quantity}
                                                        onChange={(e) => handleItemQuantityChange(item.id, e.target.value)}
                                                        inputProps={{ min: 0, step: 1, inputMode: 'numeric' }}
                                                        sx={{
                                                            '& .MuiOutlinedInput-root': {
                                                                bgcolor: '#FFFFFF',
                                                                fontSize: '1.2rem',
                                                                fontWeight: 600,
                                                                '&.Mui-focused fieldset': {
                                                                    borderColor: '#2196F3',
                                                                    borderWidth: '3px',
                                                                },
                                                            },
                                                            '& input': {
                                                                textAlign: 'center',
                                                                fontSize: '1.2rem',
                                                                fontWeight: 600,
                                                            },
                                                        }}
                                                    />
                                                    <Typography variant="body2" color="#2196F3" fontWeight={600}>
                                                        ‡∏ä‡∏¥‡πâ‡∏ô
                                                    </Typography>
                                                </Box>
                                            </Grid>
                                            <Grid item xs={6} md={4}>
                                                <Box sx={{
                                                    p: 3,
                                                    bgcolor: 'linear-gradient(135deg, rgba(144, 15, 15, 0.05) 0%, rgba(227, 98, 100, 0.1) 100%)',
                                                    borderRadius: '16px',
                                                    border: '3px solid #900F0F',
                                                    textAlign: 'center',
                                                    height: '100%',
                                                    display: 'flex',
                                                    flexDirection: 'column',
                                                    justifyContent: 'center',
                                                    minHeight: '140px'
                                                }}>
                                                    <Typography variant="caption" fontWeight={600} color="#900F0F" sx={{ mb: 1, display: 'block' }}>
                                                        üíµ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
                                                    </Typography>
                                                    <Typography variant="h4" fontWeight={700} color="#900F0F">
                                                        {formatCurrency(item.total)}
                                                    </Typography>
                                                </Box>
                                            </Grid>
                                        </Grid>
                                    </CardContent>
                                </Card>
                            ))}

                            <Divider sx={{ my: 3 }} />

                            {/* Total Summary */}
                            <Card sx={{
                                background: 'linear-gradient(135deg, rgba(144, 15, 15, 0.05) 0%, rgba(227, 98, 100, 0.05) 100%)',
                                border: '2px solid #E36264',
                            }}>
                                <CardContent>
                                    <Typography variant="h6" fontWeight={600} color="#900F0F" gutterBottom>
                                        ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô
                                    </Typography>
                                    <Grid container spacing={2}>
                                        <Grid item xs={6}>
                                            <Typography variant="body1">‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ:</Typography>
                                        </Grid>
                                        <Grid item xs={6}>
                                            <Typography variant="body1" textAlign="right" fontWeight={600}>
                                                {formatCurrency(formData.subtotal)}
                                            </Typography>
                                        </Grid>
                                        <Grid item xs={6}>
                                            <Typography variant="body1">VAT 7%:</Typography>
                                        </Grid>
                                        <Grid item xs={6}>
                                            <Typography variant="body1" textAlign="right" fontWeight={600}>
                                                {formatCurrency(formData.vat)}
                                            </Typography>
                                        </Grid>
                                        <Grid item xs={12}>
                                            <Divider sx={{ borderColor: '#B20000' }} />
                                        </Grid>
                                        <Grid item xs={6}>
                                            <Typography variant="h6" fontWeight={700} color="#900F0F">
                                                ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô:
                                            </Typography>
                                        </Grid>
                                        <Grid item xs={6}>
                                            <Typography variant="h6" textAlign="right" fontWeight={700} color="#900F0F">
                                                {formatCurrency(formData.total)}
                                            </Typography>
                                        </Grid>
                                    </Grid>
                                </CardContent>
                            </Card>
                        </StyledPaper>
                    </Grid>

                    {/* Step 3: Payment Terms */}
                    <Grid item xs={12}>
                        <StyledPaper>
                            <SectionHeader>
                                <Avatar sx={{ bgcolor: '#FFFFFF', color: '#900F0F' }}>
                                    <PaymentIcon />
                                </Avatar>
                                <Box>
                                    <Typography variant="h6" fontWeight={600}>
                                        ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                                    </Typography>
                                    <Typography variant="body2" sx={{ opacity: 0.9 }}>
                                        ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥
                                    </Typography>
                                </Box>
                            </SectionHeader>

                            <Grid container spacing={3}>
                                {/* Payment Method */}
                                <Grid item xs={12} md={6}>
                                    <FormControl component="fieldset">
                                        <FormLabel
                                            component="legend"
                                            sx={{
                                                color: '#900F0F',
                                                fontWeight: 600,
                                                '&.Mui-focused': { color: '#900F0F' }
                                            }}
                                        >
                                            ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                                        </FormLabel>
                                        <RadioGroup
                                            value={formData.paymentMethod}
                                            onChange={(e) => handlePaymentMethodChange(e.target.value)}
                                        >
                                            <FormControlLabel
                                                value="cash"
                                                control={<Radio sx={{ color: '#B20000', '&.Mui-checked': { color: '#900F0F' } }} />}
                                                label="‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î"
                                            />
                                            <FormControlLabel
                                                value="credit_30"
                                                control={<Radio sx={{ color: '#B20000', '&.Mui-checked': { color: '#900F0F' } }} />}
                                                label="‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï 30 ‡∏ß‡∏±‡∏ô"
                                            />
                                            <FormControlLabel
                                                value="credit_60"
                                                control={<Radio sx={{ color: '#B20000', '&.Mui-checked': { color: '#900F0F' } }} />}
                                                label="‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï 60 ‡∏ß‡∏±‡∏ô"
                                            />
                                        </RadioGroup>
                                    </FormControl>
                                </Grid>

                                {/* Deposit */}
                                <Grid item xs={12} md={6}>
                                    <FormControl component="fieldset">
                                        <FormLabel
                                            component="legend"
                                            sx={{
                                                color: '#900F0F',
                                                fontWeight: 600,
                                                '&.Mui-focused': { color: '#900F0F' }
                                            }}
                                        >
                                            ‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥
                                        </FormLabel>
                                        <RadioGroup
                                            value={formData.depositPercentage}
                                            onChange={(e) => setFormData(prev => ({
                                                ...prev,
                                                depositPercentage: e.target.value,
                                                customDepositPercentage: e.target.value === 'custom' ? prev.customDepositPercentage : ''
                                            }))}
                                        >
                                            <FormControlLabel
                                                value="0"
                                                control={<Radio sx={{ color: '#B20000', '&.Mui-checked': { color: '#900F0F' } }} />}
                                                label="‡πÑ‡∏°‡πà‡∏°‡∏µ"
                                            />
                                            <FormControlLabel
                                                value="50"
                                                control={<Radio sx={{ color: '#B20000', '&.Mui-checked': { color: '#900F0F' } }} />}
                                                label="50%"
                                            />
                                            <FormControlLabel
                                                value="100"
                                                control={<Radio sx={{ color: '#B20000', '&.Mui-checked': { color: '#900F0F' } }} />}
                                                label="100%"
                                            />
                                            <FormControlLabel
                                                value="custom"
                                                control={<Radio sx={{ color: '#B20000', '&.Mui-checked': { color: '#900F0F' } }} />}
                                                label={
                                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                                        <span>‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á</span>
                                                        <TextField
                                                            size="small"
                                                            value={formData.customDepositPercentage}
                                                            onChange={(e) => setFormData(prev => ({
                                                                ...prev,
                                                                customDepositPercentage: e.target.value
                                                            }))}
                                                            disabled={formData.depositPercentage !== 'custom'}
                                                            sx={{ width: 80 }}
                                                            InputProps={{
                                                                endAdornment: <InputAdornment position="end">%</InputAdornment>,
                                                            }}
                                                        />
                                                    </Box>
                                                }
                                            />
                                        </RadioGroup>
                                    </FormControl>
                                </Grid>

                                {/* Payment Summary */}
                                <Grid item xs={12}>
                                    <Card sx={{
                                        background: 'linear-gradient(135deg, rgba(144, 15, 15, 0.05) 0%, rgba(227, 98, 100, 0.05) 100%)',
                                        border: '2px solid #E36264',
                                    }}>
                                        <CardContent>
                                            <Typography variant="h6" fontWeight={600} color="#900F0F" gutterBottom>
                                                ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                                            </Typography>
                                            <Grid container spacing={2}>
                                                <Grid item xs={6}>
                                                    <Typography variant="body1">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥:</Typography>
                                                </Grid>
                                                <Grid item xs={6}>
                                                    <Typography variant="body1" textAlign="right" fontWeight={600} color="#B20000">
                                                        {formatCurrency(formData.depositAmount)}
                                                    </Typography>
                                                </Grid>
                                                <Grid item xs={6}>
                                                    <Typography variant="body1">‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</Typography>
                                                </Grid>
                                                <Grid item xs={6}>
                                                    <Typography variant="body1" textAlign="right" fontWeight={600}>
                                                        {formatCurrency(formData.remainingAmount)}
                                                    </Typography>
                                                </Grid>
                                                {formData.dueDate && (
                                                    <>
                                                        <Grid item xs={6}>
                                                            <Typography variant="body1">‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î:</Typography>
                                                        </Grid>
                                                        <Grid item xs={6}>
                                                            <Typography variant="body1" textAlign="right" fontWeight={600} color="#B20000">
                                                                {formatDate(formData.dueDate)}
                                                            </Typography>
                                                        </Grid>
                                                    </>
                                                )}
                                            </Grid>
                                        </CardContent>
                                    </Card>
                                </Grid>

                                {/* Due Date Picker */}
                                {formData.paymentMethod !== 'cash' && (
                                    <Grid item xs={12} md={6}>
                                        <DatePicker
                                            label="‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î"
                                            value={formData.dueDate}
                                            onChange={(date) => setFormData(prev => ({ ...prev, dueDate: date }))}
                                            slotProps={{
                                                textField: {
                                                    fullWidth: true,
                                                    InputProps: {
                                                        startAdornment: (
                                                            <InputAdornment position="start">
                                                                <CalendarIcon sx={{ color: '#B20000' }} />
                                                            </InputAdornment>
                                                        ),
                                                    },
                                                }
                                            }}
                                        />
                                    </Grid>
                                )}

                                {/* Notes */}
                                <Grid item xs={12}>
                                    <TextField
                                        fullWidth
                                        multiline
                                        rows={4}
                                        label="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"
                                        value={formData.notes}
                                        onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}
                                        placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡∏µ‡πâ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß..."
                                        sx={{
                                            '& .MuiOutlinedInput-root': {
                                                '&.Mui-focused fieldset': {
                                                    borderColor: '#900F0F',
                                                },
                                            },
                                            '& .MuiInputLabel-root.Mui-focused': {
                                                color: '#900F0F',
                                            },
                                        }}
                                    />
                                </Grid>
                            </Grid>
                        </StyledPaper>
                    </Grid>
                </Grid>

                {/* Action Buttons */}
                <Box sx={{ mt: 4, display: 'flex', justifyContent: 'space-between', gap: 2 }}>
                    <SecondaryButton
                        size="large"
                        startIcon={<ArrowBackIcon />}
                        onClick={onBack}
                    >
                        ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                    </SecondaryButton>

                    <Box sx={{ display: 'flex', gap: 2 }}>
                        <SecondaryButton
                            size="large"
                            startIcon={<VisibilityIcon />}
                            onClick={() => setShowPreview(true)}
                            disabled={formData.total === 0}
                        >
                            ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                        </SecondaryButton>

                        <SecondaryButton
                            size="large"
                            startIcon={<DraftIcon />}
                            onClick={() => handleSubmitForm('draft')}
                            disabled={isSubmitting}
                        >
                            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡πà‡∏≤‡∏á
                        </SecondaryButton>

                        <PrimaryButton
                            size="large"
                            startIcon={<SendIcon />}
                            onClick={() => handleSubmitForm('review')}
                            disabled={isSubmitting || formData.total === 0}
                        >
                            {isSubmitting ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...' : '‡∏™‡πà‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö'}
                        </PrimaryButton>
                    </Box>
                </Box>

                {/* Summary Alert */}
                {formData.total > 0 && (
                    <Alert
                        severity="success"
                        sx={{
                            mt: 3,
                            border: '1px solid #4caf50',
                            '& .MuiAlert-icon': {
                                color: '#4caf50',
                            },
                        }}
                        icon={<CheckCircleIcon />}
                    >
                        <Typography variant="body1" fontWeight={600}>
                            ‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á!
                        </Typography>
                        <Typography variant="body2">
                            ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° {formatCurrency(formData.total)} ‚Ä¢ ‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥ {formatCurrency(formData.depositAmount)} ‚Ä¢
                            ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {formatCurrency(formData.remainingAmount)}
                        </Typography>
                    </Alert>
                )}

                {/* Preview Modal */}
                <Dialog
                    open={showPreview}
                    onClose={() => setShowPreview(false)}
                    maxWidth="lg"
                    fullWidth
                    TransitionComponent={Transition}
                    PaperProps={{
                        sx: {
                            borderRadius: 3,
                            maxHeight: '95vh',
                        },
                    }}
                >
                    <DialogTitle sx={{
                        bgcolor: '#900F0F',
                        color: '#FFFFFF',
                        display: 'flex',
                        alignItems: 'center',
                        gap: 1,
                    }}>
                        <VisibilityIcon />
                        <Typography variant="h6" fontWeight={600}>
                            ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
                        </Typography>
                    </DialogTitle>

                    <DialogContent sx={{ p: 3 }}>
                        <QuotationPreview
                            formData={formData}
                            quotationNumber="QT-2025-XXX"
                            showActions={true}
                        />
                    </DialogContent>

                    <DialogActions sx={{ p: 3, bgcolor: '#F8F9FA' }}>
                        <SecondaryButton
                            startIcon={<PrintIcon />}
                            onClick={() => {
                                // Trigger custom print event
                                const event = new CustomEvent('quotation-print');
                                document.dispatchEvent(event);
                            }}
                        >
                            ‡∏û‡∏¥‡∏°‡∏û‡πå
                        </SecondaryButton>
                        <PrimaryButton
                            onClick={() => setShowPreview(false)}
                        >
                            ‡∏õ‡∏¥‡∏î
                        </PrimaryButton>
                    </DialogActions>
                </Dialog>
            </Container>
        </Box>
    );
};

export default CreateQuotationForm;
