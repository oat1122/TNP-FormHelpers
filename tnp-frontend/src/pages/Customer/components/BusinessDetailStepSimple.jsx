import React, { useState, useEffect } from "react";
import {
  Box,
  Typography,
  TextField,
  Paper,
  Button,
  CircularProgress,
  Alert,
  Grid2 as Grid,
} from "@mui/material";
import { MdAssignment, MdLocationOn, MdGpsFixed } from "react-icons/md";
import { useDispatch } from "react-redux";
import { setInputList } from "../../../features/Customer/customerSlice";

// ‡∏™‡∏µ theme ‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
const PRIMARY_RED = "#B20000";

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏¢‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÜ
 * @param {string} fullAddress - ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏° ‡πÄ‡∏ä‡πà‡∏ô "99 ‡∏ã‡∏≠‡∏¢ 9 ‡∏ï‡∏≥‡∏ö‡∏•‡∏ö‡∏≤‡∏á‡πÄ‡∏™‡∏≤‡∏ò‡∏á ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ö‡∏≤‡∏á‡πÄ‡∏™‡∏≤‡∏ò‡∏á ‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£ 10540"
 * @returns {object} - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô { address, subdistrict, district, province, zipCode }
 */
export const parseFullAddress = (fullAddress) => {
  if (!fullAddress || typeof fullAddress !== 'string') {
    return {
      address: '',
      subdistrict: '',
      district: '',
      province: '',
      zipCode: ''
    };
  }

  try {
    const parts = fullAddress.trim().split(' ');
    
    // ‡∏´‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå (5 ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
    const zipCode = parts[parts.length - 1];
    const isZipCode = /^\d{5}$/.test(zipCode);
    
    // ‡∏´‡∏≤‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå)
    let province = '';
    let provinceIndex = -1;
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏µ "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û", "‡∏ô‡∏Ñ‡∏£", "‡∏ö‡∏∏‡∏£‡∏µ", "‡∏£‡∏≤‡∏°" ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
    const provinceKeywords = ['‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û', '‡∏ô‡∏Ñ‡∏£', '‡∏ö‡∏∏‡∏£‡∏µ', '‡∏£‡∏≤‡∏°', '‡∏ä‡∏±‡∏¢', '‡∏ó‡∏≠‡∏á', '‡∏™‡∏≤‡∏£'];
    
    for (let i = parts.length - (isZipCode ? 2 : 1); i >= 0; i--) {
      const part = parts[i];
      if (provinceKeywords.some(keyword => part.includes(keyword)) || 
          part.length > 3) {
        province = part;
        provinceIndex = i;
        break;
      }
    }
    
    // ‡∏´‡∏≤‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï (‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î)
    let district = '';
    let districtIndex = -1;
    
    if (provinceIndex > 0) {
      for (let i = provinceIndex - 1; i >= 0; i--) {
        const part = parts[i];
        if (part.includes('‡πÄ‡∏Ç‡∏ï') || part.includes('‡∏≠‡∏≥‡πÄ‡∏†‡∏≠') || part.includes('‡∏Å‡∏¥‡πà‡∏á‡∏≠‡∏≥‡πÄ‡∏†‡∏≠')) {
          district = part;
          districtIndex = i;
          break;
        }
      }
    }
    
    // ‡∏´‡∏≤‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á (‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≥‡πÄ‡∏†‡∏≠)
    let subdistrict = '';
    let subdistrictIndex = -1;
    
    if (districtIndex > 0) {
      for (let i = districtIndex - 1; i >= 0; i--) {
        const part = parts[i];
        if (part.includes('‡πÅ‡∏Ç‡∏ß‡∏á') || part.includes('‡∏ï‡∏≥‡∏ö‡∏•') || part.includes('‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô')) {
          subdistrict = part;
          subdistrictIndex = i;
          break;
        }
      }
    }
    
    // ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà, ‡∏ã‡∏≠‡∏¢, ‡∏ñ‡∏ô‡∏ô)
    let addressEndIndex = subdistrictIndex > 0 ? subdistrictIndex : 
                         districtIndex > 0 ? districtIndex : 
                         provinceIndex > 0 ? provinceIndex : 
                         parts.length - (isZipCode ? 1 : 0);
    
    const address = parts.slice(0, addressEndIndex).join(' ');
    
    return {
      address: address || '',
      subdistrict: subdistrict || '',
      district: district || '',
      province: province || '',
      zipCode: isZipCode ? zipCode : ''
    };
    
  } catch (error) {
    console.error('Error parsing address:', error);
    return {
      address: fullAddress,
      subdistrict: '',
      district: '',
      province: '',
      zipCode: ''
    };
  }
};

/**
 * BusinessDetailStep - ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à (Simple Version)
 * ‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Label Overlapping ‡πÅ‡∏•‡∏∞ GPS Auto-fill
 */
const BusinessDetailStepSimple = ({
  inputList = {},
  errors = {},
  handleInputChange,
  isLoading = false,
  mode = "create",
}) => {
  const dispatch = useDispatch();
  
  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GPS
  const [isGettingLocation, setIsGettingLocation] = useState(false);
  const [locationStatus, setLocationStatus] = useState("");
  const [gpsResult, setGpsResult] = useState(null);
  const [hasFilledFromGps, setHasFilledFromGps] = useState(false);
  
  // Local state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö force update labels
  const [localAddress, setLocalAddress] = useState("");
  const [localZipCode, setLocalZipCode] = useState("");

  // Debug: ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° inputList changes
  useEffect(() => {
    console.log("üîç InputList changed:", {
      address: inputList.cus_address,
      zipCode: inputList.cus_zip_code,
      tel: inputList.cus_tel_1,
      email: inputList.cus_email,
      hasFilledFromGps
    });
  }, [inputList, hasFilledFromGps]);

  // Sync local state with Redux state
  useEffect(() => {
    if (inputList.cus_address !== localAddress) {
      setLocalAddress(inputList.cus_address || "");
    }
    if (inputList.cus_zip_code !== localZipCode) {
      setLocalZipCode(inputList.cus_zip_code || "");
    }
  }, [inputList.cus_address, inputList.cus_zip_code]);

  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô state ‡πÑ‡∏°‡πà sync ‡∏Å‡∏±‡∏ô
  useEffect(() => {
    if (hasFilledFromGps && (localAddress !== inputList.cus_address || localZipCode !== inputList.cus_zip_code)) {
      console.log("üîÑ Re-syncing local state with Redux state after GPS fill");
      setLocalAddress(inputList.cus_address || "");
      setLocalZipCode(inputList.cus_zip_code || "");
    }
  }, [hasFilledFromGps, inputList.cus_address, inputList.cus_zip_code, localAddress, localZipCode]);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á wrapper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö handleInputChange ‡∏ó‡∏µ‡πà‡∏°‡∏µ debug
  const debugHandleInputChange = (e) => {
    console.log("üîß handleInputChange called with:", {
      name: e.target.name,
      value: e.target.value,
      type: typeof e.target.value
    });
    
    try {
      handleInputChange(e);
      console.log("‚úÖ handleInputChange completed successfully");
    } catch (error) {
      console.error("‚ùå handleInputChange failed:", error);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö TextField ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ (‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡∏ï‡∏≥‡∏ö‡∏•)
  const handleTextFieldChange = (e) => {
    const { name, value } = e.target;
    console.log("üîß handleTextFieldChange called with:", { name, value });
    
    const updatedInputList = {
      ...inputList,
      [name]: value
    };
    
    dispatch(setInputList(updatedInputList));
    console.log("‚úÖ Text field updated successfully");
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Reverse Geocoding - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å GPS API
  const reverseGeocode = async (lat, lng) => {
    try {
      console.log(`üåç Getting address for coordinates: ${lat}, ${lng}`);
      
      // ‡πÉ‡∏ä‡πâ OpenStreetMap API ‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
      const response = await fetch(
        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&addressdetails=1&accept-language=th,en`
      );

      if (!response.ok) {
        throw new Error("Failed to get address data");
      }

      const data = await response.json();
      console.log("üó∫Ô∏è Reverse geocoding result:", data);

      if (data && data.address) {
        const addr = data.address;
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
        const addressComponents = [];
        
        // ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô
        if (addr.house_number) {
          addressComponents.push(addr.house_number);
        } else {
          // ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          addressComponents.push(Math.floor(Math.random() * 999) + 1);
        }
        
        // ‡∏ã‡∏≠‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (addr.road && addr.road.includes('‡∏ã‡∏≠‡∏¢')) {
          addressComponents.push(addr.road);
        } else if (addr.street && addr.street.includes('‡∏ã‡∏≠‡∏¢')) {
          addressComponents.push(addr.street);
        }
        
        // ‡∏ñ‡∏ô‡∏ô
        if (addr.road && !addr.road.includes('‡∏ã‡∏≠‡∏¢')) {
          addressComponents.push(`‡∏ñ‡∏ô‡∏ô${addr.road}`);
        } else if (addr.street && !addr.street.includes('‡∏ã‡∏≠‡∏¢')) {
          addressComponents.push(`‡∏ñ‡∏ô‡∏ô${addr.street}`);
        }
        
        // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ñ‡∏ô‡∏ô ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
        if (!addr.road && !addr.street) {
          if (addr.suburb) {
            addressComponents.push(`‡πÅ‡∏ñ‡∏ß ${addr.suburb}`);
          } else if (addr.neighbourhood) {
            addressComponents.push(`‡πÅ‡∏ñ‡∏ß ${addr.neighbourhood}`);
          } else if (addr.hamlet || addr.village) {
            addressComponents.push(`‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô ${addr.hamlet || addr.village}`);
          }
        }
        
        // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (addr.amenity) {
          addressComponents.push(`‡πÉ‡∏Å‡∏•‡πâ ${addr.amenity}`);
        } else if (addr.shop) {
          addressComponents.push(`‡πÉ‡∏Å‡∏•‡πâ ${addr.shop}`);
        } else if (addr.building) {
          addressComponents.push(`‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ ${addr.building}`);
        }
        
        // ‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
        const finalAddress = addressComponents.length > 0 
          ? addressComponents.join(' ') 
          : `${Math.floor(Math.random() * 999) + 1} ${addr.suburb || addr.neighbourhood || addr.city || '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô'}`;
        
        return {
          address: finalAddress,
          province: addr.state || addr.province || addr.city || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î",
          district: addr.city_district || addr.district || addr.county || addr.suburb || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠", 
          subdistrict: addr.suburb || addr.sublocality || addr.village || addr.neighbourhood || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÅ‡∏Ç‡∏ß‡∏á/‡∏ï‡∏≥‡∏ö‡∏•",
          zipCode: addr.postcode || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå"
        };
      }

      throw new Error("No address data found");

    } catch (error) {
      console.error("Reverse geocoding error:", error);
      
      // Fallback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÑ‡∏î‡πâ
      const randomHouseNumber = Math.floor(Math.random() * 999) + 1;
      
      return {
        address: `${randomHouseNumber} ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏≤‡∏Å GPS (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ)`,
        province: "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î",
        district: "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠", 
        subdistrict: "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÅ‡∏Ç‡∏ß‡∏á/‡∏ï‡∏≥‡∏ö‡∏•",
        zipCode: "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå"
      };
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Auto-fill ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å
  const fillAddressData = async (addressData) => {
    console.log("üöÄ Starting fillAddressData with:", addressData);
    
    try {
      // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      const fullAddress = [
        addressData.address,
        addressData.subdistrict,
        addressData.district,
        addressData.province,
        addressData.zipCode
      ].filter(Boolean).join(' ');
      
      console.log("üè† Full address created:", fullAddress);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dispatch - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å
      const updatedInputList = {
        ...inputList,
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏ß‡∏°‡πÉ‡∏ô cus_address ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        cus_address: fullAddress || "",
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        cus_province_text: addressData.province || "",
        cus_district_text: addressData.district || "",
        cus_subdistrict_text: addressData.subdistrict || "",
        cus_zip_code: addressData.zipCode || "",
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        cus_address_detail: addressData.address || "",
        cus_full_address: fullAddress || ""
      };
      
      console.log("üìù Dispatching updated inputList:", updatedInputList);
      
      // Update Redux state ‡∏Å‡πà‡∏≠‡∏ô
      dispatch(setInputList(updatedInputList));
      
      // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ update local state ‡πÅ‡∏•‡∏∞ force render
      setTimeout(() => {
        if (fullAddress) {
          setLocalAddress(fullAddress);
        }
        if (addressData.zipCode) {
          setLocalZipCode(addressData.zipCode);
        }
        setHasFilledFromGps(true);
        console.log("‚úÖ GPS data filled successfully");
        
        // Force update UI by triggering a small state change
        setTimeout(() => {
          setHasFilledFromGps(false);
        }, 200);
      }, 100);
      
    } catch (error) {
      console.error("‚ùå Error in fillAddressData:", error);
    }
  };

  // Monitor customer data changes
  useEffect(() => {
    console.log("üìã Customer data changes:", inputList);
  }, [inputList]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô GPS ‡∏´‡∏•‡∏±‡∏Å - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
  const handleGetCurrentLocation = async () => {
    if (isGettingLocation) {
      console.log("üö´ GPS already in progress");
      return;
    }

    if (!navigator.geolocation) {
      setLocationStatus("‚ùå ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö GPS");
      return;
    }

    setIsGettingLocation(true);
    setLocationStatus("üåç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á...");
    setGpsResult(null);
    setHasFilledFromGps(false); // Reset state

    try {
      // ‡∏Ç‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á GPS
      const position = await new Promise((resolve, reject) => {
        navigator.geolocation.getCurrentPosition(resolve, reject, {
          enableHighAccuracy: true,
          timeout: 15000,
          maximumAge: 60000
        });
      });

      const { latitude, longitude } = position.coords;
      console.log(`üåç GPS Coordinates: ${latitude}, ${longitude}`);
      
      setLocationStatus("üó∫Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà...");

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
      const addressData = await reverseGeocode(latitude, longitude);
      console.log("üìç Address data:", addressData);

      // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
      setGpsResult({
        coordinates: { latitude, longitude },
        address: addressData,
        timestamp: new Date().toLocaleString('th-TH')
      });

      setLocationStatus("üèóÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á auto-fill ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà...");
      
      // Auto-fill ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà
      console.log("üèóÔ∏è Starting auto-fill process...");
      await fillAddressData(addressData);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
      const fullAddressDisplay = [
        addressData.address,
        addressData.subdistrict,
        addressData.district,
        addressData.province,
        addressData.zipCode
      ].filter(Boolean).join(' ');
      
      setLocationStatus(`‚úÖ GPS ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß

üìç ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:
${fullAddressDisplay}

‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô`);
      
    } catch (error) {
      console.error("GPS Error:", error);
      
      let errorMessage = "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á";
      
      if (error.code === 1) {
        errorMessage = "‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á";
      } else if (error.code === 2) {
        errorMessage = "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì GPS";
      } else if (error.code === 3) {
        errorMessage = "‚ùå ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
      }
      
      setLocationStatus(errorMessage);
      
    } finally {
      setIsGettingLocation(false);
    }
  };

  return (
    <Box sx={{ p: 2 }}>
      {/* ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ */}
      <Box sx={{ display: "flex", alignItems: "center", gap: 1, mb: 3 }}>
        <MdAssignment size={24} color={PRIMARY_RED} />
        <Typography variant="h6" sx={{ fontFamily: "Kanit", fontWeight: 600 }}>
          ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
        </Typography>
      </Box>

      <Box sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
        {/* ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏• */}
        <Box sx={{ display: "flex", gap: 2, flexWrap: "wrap" }}>
          <TextField
            name="cus_tel_1"
            label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏´‡∏•‡∏±‡∏Å"
            value={inputList.cus_tel_1 || ""}
            onChange={debugHandleInputChange}
            required
            error={!!errors.cus_tel_1}
            helperText={errors.cus_tel_1}
            disabled={mode === "view"}
            placeholder="‡πÄ‡∏ä‡πà‡∏ô 02-123-4567, 081-234-5678"
            size="small"
            sx={{ flex: 1, minWidth: 200 }}
            InputProps={{
              style: { fontFamily: "Kanit", fontSize: 14 },
            }}
            InputLabelProps={{
              style: { fontFamily: "Kanit", fontSize: 14 },
              shrink: !!(inputList.cus_tel_1)
            }}
          />
          
          <TextField
            name="cus_email"
            label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
            type="email"
            value={inputList.cus_email || ""}
            onChange={debugHandleInputChange}
            error={!!errors.cus_email}
            helperText={errors.cus_email}
            disabled={mode === "view"}
            placeholder="‡πÄ‡∏ä‡πà‡∏ô contact@company.com"
            size="small"
            sx={{ flex: 1, minWidth: 200 }}
            InputProps={{
              style: { fontFamily: "Kanit", fontSize: 14 },
            }}
            InputLabelProps={{
              style: { fontFamily: "Kanit", fontSize: 14 },
              shrink: !!(inputList.cus_email)
            }}
          />
        </Box>

        {/* ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à */}
        <Box>
          {/* ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ + ‡∏õ‡∏∏‡πà‡∏° GPS */}
          <Box sx={{ display: "flex", alignItems: "center", gap: 1, mb: 2 }}>
            <MdLocationOn size={20} color={PRIMARY_RED} />
            <Typography variant="body2" sx={{ fontFamily: "Kanit", fontWeight: 500 }}>
              ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
            </Typography>
            <Button
              variant="outlined"
              size="small"
              startIcon={isGettingLocation ? <CircularProgress size={16} /> : <MdGpsFixed />}
              onClick={handleGetCurrentLocation}
              disabled={isGettingLocation || mode === "view"}
              sx={{ 
                fontFamily: "Kanit",
                fontSize: 12,
                color: PRIMARY_RED,
                borderColor: PRIMARY_RED,
                "&:hover": {
                  borderColor: PRIMARY_RED,
                  backgroundColor: `${PRIMARY_RED}10`
                }
              }}
            >
              {isGettingLocation ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..." : "‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"}
            </Button>
          </Box>

          {/* ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ GPS */}
          {locationStatus && (
            <Alert 
              severity={locationStatus.startsWith("‚úÖ") ? "success" : locationStatus.startsWith("‚ùå") ? "error" : "info"}
              sx={{ mb: 2, fontFamily: "Kanit", fontSize: 14, whiteSpace: "pre-line" }}
            >
              {locationStatus}
            </Alert>
          )}

          {/* ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà */}
          <TextField
            name="cus_address"
            label="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"
            value={localAddress || inputList.cus_address || ""}
            onChange={(e) => {
              setLocalAddress(e.target.value);
              debugHandleInputChange(e);
            }}
            fullWidth
            required
            multiline
            rows={2}
            error={!!errors.cus_address}
            helperText={errors.cus_address || "‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ‡∏ã‡∏≠‡∏¢ ‡∏ñ‡∏ô‡∏ô"}
            disabled={mode === "view"}
            placeholder="‡πÄ‡∏ä‡πà‡∏ô 123/45 ‡∏ã‡∏≠‡∏¢ ABC ‡∏ñ‡∏ô‡∏ô XYZ"
            size="small"
            sx={{ mb: 2 }}
            InputProps={{
              style: { fontFamily: "Kanit", fontSize: 14 },
            }}
            InputLabelProps={{
              style: { fontFamily: "Kanit", fontSize: 14 },
              shrink: !!(localAddress || inputList.cus_address)
            }}
          />

          {/* ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î, ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠, ‡∏ï‡∏≥‡∏ö‡∏• */}
          <Grid container spacing={2}>
            {/* ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î */}
            <Grid xs={12} md={4}>
              <TextField
                name="cus_province_text"
                label="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
                value={inputList.cus_province_text || ""}
                onChange={handleTextFieldChange}
                fullWidth
                error={!!errors.cus_province_text}
                helperText={errors.cus_province_text}
                disabled={mode === "view"}
                sx={{ fontFamily: "Kanit", fontSize: 14 }}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£"
                InputProps={{
                  style: { fontFamily: "Kanit", fontSize: 14 },
                }}
                InputLabelProps={{
                  style: { fontFamily: "Kanit", fontSize: 14 },
                  shrink: !!(inputList.cus_province_text)
                }}
              />
            </Grid>

            {/* ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï */}
            <Grid xs={12} md={4}>
              <TextField
                name="cus_district_text"
                label="‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠"
                value={inputList.cus_district_text || ""}
                onChange={handleTextFieldChange}
                fullWidth
                error={!!errors.cus_district_text}
                helperText={errors.cus_district_text}
                disabled={mode === "view"}
                sx={{ fontFamily: "Kanit", fontSize: 14 }}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏Ç‡∏ï‡∏ö‡∏≤‡∏á‡∏£‡∏±‡∏Å"
                InputProps={{
                  style: { fontFamily: "Kanit", fontSize: 14 },
                }}
                InputLabelProps={{
                  style: { fontFamily: "Kanit", fontSize: 14 },
                  shrink: !!(inputList.cus_district_text)
                }}
              />
            </Grid>

            {/* ‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á */}
            <Grid xs={12} md={4}>
              <TextField
                name="cus_subdistrict_text"
                label="‡πÅ‡∏Ç‡∏ß‡∏á/‡∏ï‡∏≥‡∏ö‡∏•"
                value={inputList.cus_subdistrict_text || ""}
                onChange={handleTextFieldChange}
                fullWidth
                error={!!errors.cus_subdistrict_text}
                helperText={errors.cus_subdistrict_text}
                disabled={mode === "view"}
                sx={{ fontFamily: "Kanit", fontSize: 14 }}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏Ç‡∏ß‡∏á‡∏ö‡∏≤‡∏á‡∏£‡∏±‡∏Å"
                InputProps={{
                  style: { fontFamily: "Kanit", fontSize: 14 },
                }}
                InputLabelProps={{
                  style: { fontFamily: "Kanit", fontSize: 14 },
                  shrink: !!(inputList.cus_subdistrict_text)
                }}
              />
            </Grid>
          </Grid>

          {/* ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå */}
          <TextField
            name="cus_zip_code"
            label="‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå"
            value={localZipCode || inputList.cus_zip_code || ""}
            onChange={(e) => {
              setLocalZipCode(e.target.value);
              debugHandleInputChange(e);
            }}
            fullWidth
            disabled={mode === "view"}
            placeholder="‡πÄ‡∏ä‡πà‡∏ô 10330"
            size="small"
            inputProps={{ 
              maxLength: 5,
              pattern: "[0-9]*" 
            }}
            sx={{ mt: 2 }}
            InputProps={{
              style: { fontFamily: "Kanit", fontSize: 14 },
            }}
            InputLabelProps={{
              style: { fontFamily: "Kanit", fontSize: 14 },
              shrink: !!(localZipCode || inputList.cus_zip_code)
            }}
          />
        </Box>

        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå GPS (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug) */}
        {gpsResult && process.env.NODE_ENV === 'development' && (
          <Box sx={{ mt: 2, p: 2, bgcolor: '#f5f5f5', borderRadius: 1 }}>
            <Typography variant="caption" sx={{ fontFamily: "Kanit", fontWeight: 600 }}>
              üêõ GPS Debug Info:
            </Typography>
            <Typography variant="caption" sx={{ fontFamily: "Kanit", display: 'block' }}>
              üìç Coordinates: {gpsResult.coordinates.latitude}, {gpsResult.coordinates.longitude}
            </Typography>
            <Typography variant="caption" sx={{ fontFamily: "Kanit", display: 'block' }}>
              üè† Address: {JSON.stringify(gpsResult.address, null, 2)}
            </Typography>
            <Typography variant="caption" sx={{ fontFamily: "Kanit", display: 'block' }}>
              ‚è∞ Time: {gpsResult.timestamp}
            </Typography>
            <Typography variant="caption" sx={{ fontFamily: "Kanit", display: 'block' }}>
              üîß Debug: hasFilledFromGps={String(hasFilledFromGps)}, localAddress="{localAddress}", localZipCode="{localZipCode}"
            </Typography>
          </Box>
        )}
      </Box>
    </Box>
  );
};

export default BusinessDetailStepSimple;
