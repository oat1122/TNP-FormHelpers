import { useState, useEffect } from "react";
import { useDispatch } from "react-redux";
import { setInputList } from "../../../../features/Customer/customerSlice";

export const useGpsHelper = (inputList) => {
  const dispatch = useDispatch();

  // GPS States
  const [isGettingLocation, setIsGettingLocation] = useState(false);
  const [locationStatus, setLocationStatus] = useState("");
  const [gpsResult, setGpsResult] = useState(null);
  const [hasFilledFromGps, setHasFilledFromGps] = useState(false);
  const [watchLonger, setWatchLonger] = useState(true);
  const [gpsDebugLogs, setGpsDebugLogs] = useState([]);

  // Helper Functions
  const getLastGpsFromStorage = () => {
    try {
      const lastGps = JSON.parse(localStorage.getItem("lastGps") || "{}");
      if (
        lastGps?.timestamp &&
        Date.now() - new Date(lastGps.timestamp).getTime() < 60000
      ) {
        console.log("üîÑ Using cached GPS result (less than 1 minute old)");
        return lastGps;
      }
    } catch (error) {
      console.warn("‚ö†Ô∏è Failed to parse localStorage GPS data:", error);
    }
    return null;
  };

  const saveGpsToStorage = (result) => {
    try {
      localStorage.setItem("lastGps", JSON.stringify(result));
      console.log("üíæ GPS result saved to localStorage");
    } catch (error) {
      console.warn("‚ö†Ô∏è Failed to save GPS to localStorage:", error);
    }
  };

  const addDebugLog = (message, data = null) => {
    const timestamp = new Date().toLocaleTimeString("th-TH");
    const newLog = {
      id: Date.now(),
      timestamp,
      message,
      data,
    };

    setGpsDebugLogs((prev) => {
      const updated = [...prev, newLog];
      return updated.slice(-10);
    });

    console.log(`[GPS Debug ${timestamp}] ${message}`, data || "");
  };

  const checkGPSAvailability = async () => {
    if (!navigator.geolocation) {
      return {
        available: false,
        message: "‚ùå ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö GPS",
      };
    }

    try {
      const permission = await navigator.permissions.query({
        name: "geolocation",
      });
      console.log("üîê GPS Permission Status:", permission.state);

      switch (permission.state) {
        case "denied":
          return {
            available: false,
            permission: "denied",
            message: "üö´ GPS ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå",
            action: "‡∏Å‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô üîí ‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á'",
          };
        case "prompt":
          return {
            available: true,
            permission: "prompt",
            message: "üìç GPS ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏à‡∏∞‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)",
          };
        case "granted":
          return {
            available: true,
            permission: "granted",
            message: "‚úÖ GPS ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÅ‡∏•‡πâ‡∏ß",
          };
        default:
          return {
            available: true,
            permission: "unknown",
            message: "üìç GPS ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
          };
      }
    } catch (error) {
      console.warn("‚ö†Ô∏è Permission check failed:", error);
      return {
        available: true,
        permission: "unknown",
        message: "üìç GPS ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
      };
    }
  };

  const isValidThaiCoordinates = (lat, lng) => {
    const isInThailand =
      lat >= 5.6 && lat <= 20.5 && lng >= 97.3 && lng <= 105.6;
    const isNotZero = lat !== 0 && lng !== 0;

    if (!isNotZero) {
      console.warn("‚ö†Ô∏è Invalid coordinates: Zero values");
      return false;
    }

    if (!isInThailand) {
      console.warn(`‚ö†Ô∏è Coordinates outside Thailand: ${lat}, ${lng}`);
      return false;
    }

    console.log(`‚úÖ Valid Thai coordinates: ${lat}, ${lng}`);
    return true;
  };

  const watchHighAccuracyPosition = async () => {
    const options = {
      enableHighAccuracy: true,
      timeout: watchLonger ? 45000 : 15000,
      maximumAge: 0,
    };

    addDebugLog(
      `Starting GPS watch (timeout: ${options.timeout}ms, watchLonger: ${watchLonger})`
    );

    return new Promise((resolve, reject) => {
      let bestPosition = null;
      let bestAccuracy = Infinity;
      let positionCount = 0;

      const watchId = navigator.geolocation.watchPosition(
        (position) => {
          positionCount++;
          const accuracy = position.coords.accuracy;

          const logData = {
            count: positionCount,
            lat: position.coords.latitude,
            lng: position.coords.longitude,
            accuracy,
            isBest: accuracy < bestAccuracy,
          };

          addDebugLog(`GPS Position #${positionCount}`, logData);
          console.log(`üì° GPS accuracy: ${accuracy}m (best: ${bestAccuracy}m)`);

          if (accuracy < bestAccuracy) {
            bestAccuracy = accuracy;
            bestPosition = position;
            addDebugLog(`üéØ New best position found: ${accuracy}m`);
            console.log(`üéØ New best position found: ${accuracy}m`);
          }

          if (accuracy <= 30) {
            navigator.geolocation.clearWatch(watchId);
            addDebugLog(
              `‚úÖ Good accuracy achieved: ${accuracy}m after ${positionCount} attempts`
            );
            console.log(`‚úÖ Good accuracy achieved: ${accuracy}m`);
            resolve(position);
          }
        },
        (err) => {
          navigator.geolocation.clearWatch(watchId);
          addDebugLog(`‚ùå Watch position error: ${err.message}`, {
            code: err.code,
          });
          console.error("‚ùå Watch position error:", err);
          reject(err);
        },
        options
      );

      setTimeout(() => {
        navigator.geolocation.clearWatch(watchId);
        if (bestPosition) {
          addDebugLog(
            `‚è∞ Timeout: Using best position (${bestAccuracy}m) after ${positionCount} attempts`
          );
          console.log(`‚è∞ Timeout: Using best position (${bestAccuracy}m)`);
          resolve(bestPosition);
        } else {
          addDebugLog(
            `‚ùå Timeout: No position found after ${positionCount} attempts`
          );
          reject(new Error("GPS timeout - no position found"));
        }
      }, options.timeout);
    });
  };

  const getLocationFromIp = async () => {
    try {
      console.log("üåê Trying IP-based location...");
      const res = await fetch("https://ipapi.co/json/");

      if (!res.ok) throw new Error(`HTTP ${res.status}: IP geolocation failed`);

      const data = await res.json();

      if (data.latitude && data.longitude) {
        console.log("üìç IP location found:", data);
        return {
          coords: {
            latitude: parseFloat(data.latitude),
            longitude: parseFloat(data.longitude),
            accuracy: 5000,
          },
          source: "ip",
          city: data.city,
          region: data.region,
          country: data.country_name,
        };
      } else {
        throw new Error("No coordinates in IP response");
      }
    } catch (err) {
      console.error("‚ùå IP location error:", err);
      throw err;
    }
  };

  const reverseGeocodeAlternative = async (lat, lng) => {
    try {
      console.log(`üåç Trying alternative geocoding service: ${lat}, ${lng}`);
      addDebugLog("üåê Using geocode.maps.co as alternative service");

      const response = await fetch(
        `https://geocode.maps.co/reverse?lat=${lat}&lon=${lng}&format=json`,
        {
          headers: {
            "User-Agent": "TNP-FormHelpers/1.0",
          },
        }
      );

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: Alternative geocoding failed`);
      }

      const data = await response.json();
      console.log("üó∫Ô∏è Alternative geocoding result:", data);

      if (data && data.display_name) {
        const parts = data.display_name.split(",").map((part) => part.trim());

        const randomHouseNumber = Math.floor(Math.random() * 899) + 100;
        const address =
          parts[0] && parts[1]
            ? `${randomHouseNumber} ${parts[1]}`
            : `${randomHouseNumber} ${parts[0] || "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å GPS"}`;
        const district = parts[2] || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠";
        const province = parts[3] || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î";
        const zipCode = parts[parts.length - 1]?.match(/\d{5}/)
          ? parts[parts.length - 1].match(/\d{5}/)[0]
          : "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå";

        return {
          address,
          province,
          district,
          subdistrict: "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÅ‡∏Ç‡∏ß‡∏á/‡∏ï‡∏≥‡∏ö‡∏•",
          zipCode,
          rawData: data,
          source: "geocode.maps.co",
        };
      }

      throw new Error("No data from alternative geocoding service");
    } catch (error) {
      console.error("‚ùå Alternative geocoding error:", error);
      throw error;
    }
  };

  const reverseGeocode = async (lat, lng) => {
    try {
      console.log(`üåç Getting address for coordinates: ${lat}, ${lng}`);
      
      if (!isValidThaiCoordinates(lat, lng)) {
        throw new Error("Invalid coordinates for Thailand");
      }
      
      try {
        addDebugLog("üó∫Ô∏è Trying primary geocoding service (nominatim)");
        
        const response = await fetch(
          `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&addressdetails=1&accept-language=th,en&zoom=18&extratags=1`,
          {
            headers: {
              "User-Agent": "TNP-FormHelpers/1.0",
            },
          }
        );

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: Primary geocoding failed`);
        }

        const data = await response.json();
        console.log("üó∫Ô∏è Primary geocoding result:", data);

        if (data && data.address) {
          const addr = data.address;
          
          const addressComponents = [];
          
          if (addr.house_number) {
            addressComponents.push(addr.house_number);
          } else {
            addressComponents.push(Math.floor(Math.random() * 899) + 100);
          }
          
          if (addr.road) {
            if (addr.road.includes("‡∏ã‡∏≠‡∏¢")) {
              addressComponents.push(addr.road);
            } else {
              addressComponents.push(`‡∏ñ‡∏ô‡∏ô${addr.road}`);
            }
          }
          
          if (addr.suburb) {
            addressComponents.push(`‡πÅ‡∏ñ‡∏ß ${addr.suburb}`);
          } else if (addr.neighbourhood) {
            addressComponents.push(`‡πÅ‡∏ñ‡∏ß ${addr.neighbourhood}`);
          }
          
          const finalAddress = addressComponents.join(" ");
          const province = addr.state || addr.province || addr.city || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î";
          const district = addr.city_district || addr.district || addr.county || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠";
          const subdistrict = addr.suburb || addr.village || addr.neighbourhood || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÅ‡∏Ç‡∏ß‡∏á/‡∏ï‡∏≥‡∏ö‡∏•";
          const zipCode = addr.postcode || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå";
          
          console.log("‚úÖ Primary address parsed successfully:", {
            address: finalAddress,
            province,
            district,
            subdistrict,
            zipCode,
          });
          
          return {
            address: finalAddress,
            province,
            district,
            subdistrict,
            zipCode,
            rawData: data,
            source: "nominatim"
          };
        }

        throw new Error("No address data found in primary response");
      } catch (primaryError) {
        addDebugLog(`‚ö†Ô∏è Primary geocoding failed: ${primaryError.message}, trying alternative...`);
        console.warn("‚ö†Ô∏è Primary geocoding failed:", primaryError.message);
        
        try {
          const alternativeResult = await reverseGeocodeAlternative(lat, lng);
          addDebugLog("‚úÖ Alternative geocoding successful");
          return alternativeResult;
        } catch (alternativeError) {
          addDebugLog(`‚ùå Alternative geocoding also failed: ${alternativeError.message}`);
          throw new Error(`Both geocoding services failed. Primary: ${primaryError.message}, Alternative: ${alternativeError.message}`);
        }
      }
    } catch (error) {
      console.error("‚ùå All reverse geocoding attempts failed:", error);
      addDebugLog(`‚ùå All geocoding failed: ${error.message}`);
      
      const randomHouseNumber = Math.floor(Math.random() * 899) + 100;
      
      return {
        address: `${randomHouseNumber} ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏≤‡∏Å GPS (${lat.toFixed(6)}, ${lng.toFixed(6)})`,
        province: "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î",
        district: "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠", 
        subdistrict: "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÅ‡∏Ç‡∏ß‡∏á/‡∏ï‡∏≥‡∏ö‡∏•",
        zipCode: "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå",
        error: error.message,
        fallback: true,
        source: "fallback"
      };
    }
  };

  const fillAddressData = async (addressData) => {
    console.log("üöÄ Starting fillAddressData with:", addressData);

    try {
      const fullAddress = [
        addressData.address,
        addressData.subdistrict,
        addressData.district,
        addressData.province,
        addressData.zipCode,
      ]
        .filter(Boolean)
        .join(" ");

      console.log("üè† Full address created:", fullAddress);

      const updatedInputList = {
        ...inputList,
        cus_address: fullAddress || "",
        cus_province_text: addressData.province || "",
        cus_district_text: addressData.district || "",
        cus_subdistrict_text: addressData.subdistrict || "",
        cus_zip_code: addressData.zipCode || "",
        cus_address_detail: addressData.address || "",
        cus_full_address: fullAddress || "",
      };

      console.log("üìù Dispatching updated inputList:", updatedInputList);
      dispatch(setInputList(updatedInputList));

      setHasFilledFromGps(true);
      console.log("‚úÖ GPS data filled successfully");
    } catch (error) {
      console.error("‚ùå Error in fillAddressData:", error);
    }
  };

  const handleGetCurrentLocation = async () => {
    if (isGettingLocation) {
      console.log("üö´ GPS already in progress");
      return;
    }

    const cachedGps = getLastGpsFromStorage();
    if (cachedGps) {
      setGpsResult(cachedGps);
      setLocationStatus("üîÑ ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ (‡∏≠‡∏≤‡∏¢‡∏∏ < 1 ‡∏ô‡∏≤‡∏ó‡∏µ)");
      await fillAddressData(cachedGps.address);
      return;
    }

    const gpsStatus = await checkGPSAvailability();
    if (!gpsStatus.available) {
      setLocationStatus(gpsStatus.message);
      if (gpsStatus.action) {
        alert(`${gpsStatus.message}\n\n${gpsStatus.action}`);
      }
      return;
    }

    setIsGettingLocation(true);
    setLocationStatus("üéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á...");
    setGpsResult(null);
    setHasFilledFromGps(false);
    setGpsDebugLogs([]);

    try {
      let position;
      let locationSource = "gps";

      try {
        addDebugLog("üõ∞Ô∏è Attempting high accuracy GPS...");
        console.log("üõ∞Ô∏è Attempting high accuracy GPS...");
        position = await watchHighAccuracyPosition();
        console.log("‚úÖ High accuracy GPS successful");
      } catch (gpsError) {
        addDebugLog(`‚ö†Ô∏è High accuracy GPS failed: ${gpsError.message}`);
        console.warn("‚ö†Ô∏è High accuracy GPS failed:", gpsError.message);

        try {
          addDebugLog("üì° Fallback to standard GPS...");
          console.log("üì° Fallback to standard GPS...");
          position = await new Promise((resolve, reject) => {
            navigator.geolocation.getCurrentPosition(resolve, reject, {
              enableHighAccuracy: false,
              timeout: 10000,
              maximumAge: 60000,
            });
          });
          locationSource = "gps-standard";
          addDebugLog("‚úÖ Standard GPS successful");
          console.log("‚úÖ Standard GPS successful");
        } catch (standardGpsError) {
          addDebugLog(`‚ö†Ô∏è Standard GPS failed: ${standardGpsError.message}`);
          console.warn("‚ö†Ô∏è Standard GPS failed:", standardGpsError.message);

          try {
            addDebugLog("üåê Fallback to IP location...");
            console.log("üåê Fallback to IP location...");
            position = await getLocationFromIp();
            locationSource = "ip";
            addDebugLog("‚úÖ IP location successful");
            console.log("‚úÖ IP location successful");
          } catch (ipError) {
            throw new Error(
              `All location methods failed. GPS: ${gpsError.message}, IP: ${ipError.message}`
            );
          }
        }
      }

      const { latitude, longitude, accuracy } = position.coords;

      if (!isValidThaiCoordinates(latitude, longitude)) {
        throw new Error(
          `Invalid coordinates: ${latitude}, ${longitude} (outside Thailand or zero values)`
        );
      }

      console.log(`üéØ Location found via ${locationSource}:`, {
        lat: latitude,
        lng: longitude,
        accuracy: accuracy || "unknown",
      });

      if (accuracy > 100 && locationSource === "gps") {
        setLocationStatus(
          "‚ö†Ô∏è ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏≠‡πà‡∏≠‡∏ô"
        );
        alert(
          "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏≠‡πà‡∏≠‡∏ô\n‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏¥‡∏î GPS ‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î‡πÉ‡∏´‡∏°‡πà"
        );
      }

      setLocationStatus(
        `üìç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: ${Math.round(accuracy || 0)}m)...`
      );

      const addressData = await reverseGeocode(latitude, longitude);

      if (addressData.fallback) {
        setLocationStatus(`‚ö†Ô∏è ‡πÑ‡∏î‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ`);
      } else {
        setLocationStatus(
          `‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${locationSource.toUpperCase()})`
        );
      }

      const result = {
        coordinates: { latitude, longitude, accuracy },
        address: addressData,
        source: locationSource,
        timestamp: new Date().toISOString(),
      };

      setGpsResult(result);
      addDebugLog("üéâ Final GPS result saved", result);
      console.log("üéâ Final GPS result:", result);

      saveGpsToStorage(result);
      await fillAddressData(addressData);
    } catch (error) {
      console.error("‚ùå GPS Error:", error);
      addDebugLog(`‚ùå GPS Error: ${error.message}`);
      setLocationStatus(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ: ${error.message}`);

      if (error.message.includes("denied")) {
        alert(
          "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤:\n1. ‡∏Å‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô üîí ‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á'\n2. ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö\n3. ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        );
      } else if (error.message.includes("timeout")) {
        alert(
          "‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤:\n1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï\n2. ‡πÄ‡∏õ‡∏¥‡∏î GPS ‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠\n3. ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£\n4. ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        );
      }
    } finally {
      setIsGettingLocation(false);
    }
  };

  // Initialize GPS status on mount
  useEffect(() => {
    const initGPS = async () => {
      const gpsStatus = await checkGPSAvailability();
      console.log("üéØ GPS Status:", gpsStatus);
      setLocationStatus(gpsStatus.message);
    };

    initGPS();
  }, []);

  return {
    // States
    isGettingLocation,
    locationStatus,
    gpsResult,
    hasFilledFromGps,
    watchLonger,
    gpsDebugLogs,
    
    // Actions
    setWatchLonger,
    handleGetCurrentLocation,
  };
};
